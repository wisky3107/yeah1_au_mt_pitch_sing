"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDeserializeResult = exports.getDependUUIDList = exports.generateEffectAsset = void 0;
const path_1 = require("path");
module.paths.push((0, path_1.join)(Editor.App.path, 'node_modules'));
const { AssetDB, forEach, Asset } = require('@editor/asset-db');
const effect_utils_1 = require("../effect-utils");
async function loadTexture(assetId) {
    return new Promise((resolve) => {
        cc.assetManager.loadAny(assetId, (error, asset) => {
            if (!error) {
                resolve(asset);
            }
            else {
                resolve(null);
            }
        });
    });
}
/**
 * 在 library 里生成对应的 effectAsset 对象
 * @param asset 资源数据
 * @param code
 */
// @ts-expect-error
async function generateEffectAsset(asset, code) {
    const name = (0, path_1.basename)(asset.source, (0, path_1.extname)(asset.source));
    const effect = await (0, effect_utils_1.buildEffect)(name, code);
    // 记录 effect 的头文件依赖
    // @ts-expect-error
    forEach((db) => {
        for (const header of effect.dependencies) {
            asset.depend((0, path_1.resolve)(db.options.target, 'chunks', header + '.chunk'));
        }
    });
    const result = new cc.EffectAsset();
    Object.assign(result, effect);
    // 引擎数据结构不变，保留 hideInEditor 属性
    if (effect.editor && effect.editor.hide) {
        result.hideInEditor = true;
    }
    for (let n = 0; n < result.techniques.length; n++) {
        const technique = result.techniques[n];
        for (let i = 0; i < technique.passes.length; i++) {
            const pass = technique.passes[i];
            for (const key in pass.properties) {
                const propInfo = pass.properties[key];
                if (typeof propInfo.value === 'string') {
                    const assetId = propInfo.value;
                    if (Editor.Utils.UUID.isUUID(assetId)) {
                        const asset = await loadTexture(assetId);
                        if (asset) {
                            propInfo.value = asset;
                        }
                    }
                }
            }
        }
    }
    // 添加 meta 文件中的 combinations
    if (asset.userData) {
        if (asset.userData.combinations) {
            result.combinations = asset.userData.combinations;
        }
        if (effect.editor) {
            asset.userData.editor = effect.editor;
        }
        else {
            // 已存在的需要清空
            asset.userData.editor = undefined;
        }
    }
    const serializeJSON = EditorExtends.serialize(result);
    await asset.saveToLibrary('.json', serializeJSON);
    const depends = getDependUUIDList(serializeJSON);
    asset.setData('depends', depends);
}
exports.generateEffectAsset = generateEffectAsset;
function getDependUUIDList(content, uuid) {
    if (typeof content === 'string') {
        // 注意：此方法无法匹配出脚本引用的 uuid
        let arr = content.match(/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}(@[a-z0-9]+){0,}/g);
        if (arr) {
            // https://stackoverflow.com/questions/32813720/nodejs-profiling-parent-in-sliced-string
            arr = JSON.parse(JSON.stringify(Array.from(new Set(arr)).filter((id) => id !== uuid)));
        }
        // const arr = content.match(/"__uuid__":( )?"[^"]+/g);
        return arr || [];
    }
    // console.warn('Unable to extract dependencies properly');
    return getDeserializeResult(content).uuids;
}
exports.getDependUUIDList = getDependUUIDList;
function getDeserializeResult(json) {
    const deserializeDetails = new cc.deserialize.Details();
    deserializeDetails.reset();
    const MissingClass = EditorExtends.MissingReporter.classInstance;
    MissingClass.reset();
    MissingClass.hasMissingClass = false;
    const dependScriptID = new Set();
    function classFinder(classId) {
        if (Editor.Utils.UUID.isUUID(classId)) {
            dependScriptID.add(Editor.Utils.UUID.decompressUUID(classId));
        }
        return MissingClass.classFinder(classId);
    }
    const deserializedAsset = cc.deserialize(json, deserializeDetails, {
        classFinder,
    });
    deserializeDetails.assignAssetsBy(function (uuid, options) {
        return EditorExtends.serialize.asAsset(uuid);
    });
    return {
        instance: deserializedAsset,
        uuids: deserializeDetails.uuidList,
        dependScriptUuids: Array.from(dependScriptID),
        classFinder: MissingClass.classFinder,
    };
}
exports.getDeserializeResult = getDeserializeResult;
//# sourceMappingURL=data:application/json;base64,