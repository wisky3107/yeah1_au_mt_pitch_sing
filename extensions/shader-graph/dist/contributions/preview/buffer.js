"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreviewBuffer = void 0;
const cc_1 = require("cc");
// @ts-ignore
module.paths.push(AppModulePath);
class PreviewBuffer {
    constructor(registerName, name, scene = null) {
        this.device = cc.director.root.device;
        this.width = Math.floor(cc.director.root.mainWindow.width);
        this.height = Math.floor(cc.director.root.mainWindow.height);
        this.data = new Uint8Array(this.width * this.height * 4);
        this.renderScene = null;
        this.scene = null;
        this.windows = {};
        this.window = null;
        // windowList: IWindowInfo[] = [];
        this.regions = [new cc_1.gfx.BufferTextureCopy()];
        this.lock = false;
        this.needInvertGFXApi = [
            cc_1.gfx.API.GLES2,
            cc_1.gfx.API.GLES3,
            cc_1.gfx.API.WEBGL,
            cc_1.gfx.API.WEBGL2,
        ];
        this.renderData = {
            width: this.width,
            height: this.height,
            buffer: this.data,
        };
        this._name = name;
        this._registerName = registerName;
        this.onLoadScene(scene);
        this.regions[0].texExtent.width = this.width;
        this.regions[0].texExtent.height = this.height;
        this.createWindow();
        this.queue = [];
    }
    resize(width, height, window = null) {
        window || (window = this.window);
        // only resize when window is render window
        if (!window)
            return;
        width = Math.floor(width);
        height = Math.floor(height);
        this.renderData.width = this.width = width;
        this.renderData.height = this.height = height;
        this.regions[0].texExtent.width = width;
        this.regions[0].texExtent.height = height;
        window.resize(width, height);
        this.renderData.buffer = this.data = new Uint8Array(this.width * this.height * 4);
    }
    /**
     * WARNING: DO'NOT USE IT BEFORE DRAW!!!
     */
    clear() {
        // hack: resize width and height with 0 will be clear buff,realtime clear all data
        if (!isSceneNative) {
            this.resize(0, 0, this.window); // 原生场景会报错
        }
        this.resize(this.width, this.height, this.window);
    }
    createWindow(uuid = null) {
        if (uuid && this.windows[uuid]) {
            this.window = this.windows[uuid];
            return;
        }
        const root = cc.director.root;
        const renderPassInfo = new cc_1.gfx.RenderPassInfo([new cc_1.gfx.ColorAttachment(root.mainWindow.swapchain.colorTexture.format)], new cc_1.gfx.DepthStencilAttachment(root.mainWindow.swapchain.depthStencilTexture.format));
        renderPassInfo.colorAttachments[0].barrier = root.device.getGeneralBarrier(new cc_1.gfx.GeneralBarrierInfo(0, cc_1.gfx.AccessFlagBit.FRAGMENT_SHADER_READ_TEXTURE));
        const window = root.createWindow({
            title: this._name,
            width: this.width,
            height: this.height,
            renderPassInfo,
            isOffscreen: true,
        });
        this.window = window;
        uuid && (this.windows[uuid] = window);
    }
    removeWindow(uuid) {
        if (uuid && this.windows[uuid]) {
            cc.director.root.destroyWindow(this.windows[uuid]);
            if (this.windows[uuid] === this.window)
                this.window = null;
            delete this.windows[uuid];
        }
    }
    onLoadScene(scene) {
        this.windows = {};
        this.scene = scene;
        this.renderScene = scene.renderScene;
    }
    switchCameras(camera, currWindow) {
        if (currWindow) {
            camera.isWindowSize = false;
            camera.isEnable = true;
            camera.changeTargetWindow(currWindow);
            cc.director.root.tempWindow = currWindow;
        }
    }
    copyFrameBuffer(window = null) {
        window || (window = this.window);
        if (!window || !window.framebuffer)
            return this.renderData;
        this.device.copyTextureToBuffers(window.framebuffer.colorTextures[0], [new Uint8Array(this.renderData.buffer.buffer)], this.regions);
        this.formatBuffer(this.renderData.buffer, !this.needInvertGFXApi.includes(this.device.gfxAPI), this.device.gfxAPI === cc_1.gfx.API.METAL);
        return this.renderData;
    }
    formatBuffer(buffer, needInvert, conversionBGRA) {
        if (!needInvert)
            return buffer;
        let startIndex, invertIndex;
        const V_U_Vec4 = { r: 0, g: 0, b: 0, a: 0 };
        const indexArr = conversionBGRA ? PreviewBuffer.indexOfBGRA : PreviewBuffer.indexOfRGBA;
        for (let w = 0; w < this.renderData.width; w++) {
            for (let h = 0; h <= this.renderData.height / 2; h++) {
                startIndex = (h * this.renderData.width + w) * 4;
                // invert index
                invertIndex = ((this.renderData.height - h) * this.renderData.width + w) * 4;
                // flip Y
                V_U_Vec4.r = buffer[startIndex + indexArr[0]];
                V_U_Vec4.g = buffer[startIndex + indexArr[1]];
                V_U_Vec4.b = buffer[startIndex + indexArr[2]];
                V_U_Vec4.a = buffer[startIndex + indexArr[3]];
                buffer[startIndex + 0] = buffer[invertIndex + indexArr[0]];
                buffer[startIndex + 1] = buffer[invertIndex + indexArr[1]];
                buffer[startIndex + 2] = buffer[invertIndex + indexArr[2]];
                buffer[startIndex + 3] = buffer[invertIndex + indexArr[3]];
                buffer[invertIndex + 0] = V_U_Vec4.r;
                buffer[invertIndex + 1] = V_U_Vec4.g;
                buffer[invertIndex + 2] = V_U_Vec4.b;
                buffer[invertIndex + 3] = V_U_Vec4.a;
            }
        }
        return buffer;
    }
    getImageDataInQueue(width, height, event) {
        const params = {
            width: Math.floor(width),
            height: Math.floor(height),
        };
        this.queue.push({
            params,
            event,
        });
        this.step();
    }
    async step() {
        if (this.lock) {
            return;
        }
        this.lock = true;
        const item = this.queue.shift();
        if (!item) {
            this.lock = false;
            return;
        }
        const { params, event } = item;
        const data = await this.getImageData(params.width, params.height);
        event.reply(null, data);
        this.lock = false;
        this.step();
    }
    async getImageData(width, height) {
        if (!this.renderScene) {
            return this.renderData;
        }
        cce.Engine.repaintInEditMode();
        const root = this.renderScene.root;
        const currWindow = this.window;
        if (!currWindow) {
            return this.renderData;
        }
        let curWindowCamera = null;
        if (root) {
            for (const window of root.windows) {
                if (window.cameras.length > 0 && window === currWindow) {
                    // 对于preview可以认为一个window对应一个view
                    curWindowCamera = window.cameras[0];
                }
            }
        }
        if (!curWindowCamera) {
            return this.renderData;
        }
        const needResize = width && height && (width !== this.width || height !== this.height);
        if (needResize) {
            this.resize(width, height, currWindow);
        }
        if (curWindowCamera.width !== this.width || curWindowCamera.height !== this.height) {
            curWindowCamera.resize(width, height);
        }
        curWindowCamera.update(true);
        // 取一帧渲染完的数据
        return await new Promise((resolve) => {
            cc.director.once(cc.Director.EVENT_AFTER_DRAW, () => {
                resolve(this.copyFrameBuffer(this.window));
            });
        });
    }
}
exports.PreviewBuffer = PreviewBuffer;
PreviewBuffer.indexOfRGBA = [0, 1, 2, 3]; // r=>0 g=>1 b=>2 a=>3
PreviewBuffer.indexOfBGRA = [2, 1, 0, 3]; // r=>2 g=>1 b=>0 a=>3
//# sourceMappingURL=data:application/json;base64,