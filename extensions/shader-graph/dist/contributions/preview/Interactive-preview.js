"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InteractivePreview = void 0;
const cc_1 = require("cc");
const buffer_1 = require("./buffer");
const preview_base_1 = require("./preview-base");
const tempVec3A = new cc_1.Vec3();
const tempVec3B = new cc_1.Vec3();
function clamp(val, min, max) {
    return val < min ? min : val > max ? max : val;
}
function makeVec3InRange(inVec3, min, max) {
    inVec3.x = clamp(inVec3.x, min, max);
    inVec3.y = clamp(inVec3.y, min, max);
    inVec3.z = clamp(inVec3.z, min, max);
    return inVec3;
}
/**
 * 可交互的Preview窗口基类，可以在窗口中方便的预览场景中的元素
 */
class InteractivePreview extends preview_base_1.PreviewBase {
    constructor() {
        super();
        this.isMouseDown = false;
        this.viewDist = 10;
        this.orbitRotateSpeed = 0.01;
        this.curCameraRot = new cc_1.Quat();
        this.viewCenter = new cc_1.Vec3();
        this.node = new cc_1.Node();
        this.isMouseLeft = false;
        this._flipWheelDirection = true;
        this._curPos = cc.v3();
        this._curRot = new cc_1.Quat();
        this._forward = cc.v3(cc_1.Vec3.UNIT_Z);
        this._v3a = cc.v3();
        this.scene = new cc_1.Scene('');
        this.cameraComp = new cc_1.Node().addComponent(cc_1.Camera);
        // @ts-ignore
        this.cameraComp.node.parent = this.scene;
        this.cameraComp.node.setPosition(0, 1, 2.5);
        this.cameraComp.node.lookAt(cc_1.Vec3.ZERO);
        this.cameraComp.near = 0.01;
        this.cameraComp.enabled = false;
        this.createNodes();
        // @ts-ignore
        this.scene._load(); // ensure scene initialized
        // @ts-ignore
        this.scene._activate();
        this.cameraComp.clearColor = new cc_1.Color(71, 71, 71, 255);
        this.camera = this.cameraComp.camera;
        this.camera.isWindowSize = false;
        this.camera.cameraUsage = cc_1.renderer.scene.CameraUsage?.EDITOR;
        this.camera.detachCamera();
    }
    createNodes() {
    }
    init(registerName, queryName) {
        this.scene.name = registerName;
        this.cameraComp.node.name = registerName + 'camera';
        this.previewBuffer = new buffer_1.PreviewBuffer(registerName, queryName, this.scene);
    }
    resetCamera(modelNode) {
        this.camera.changeTargetWindow(this.previewBuffer.window);
        tempVec3A.set(0, 1, 2.5);
        this.cameraComp.node.setPosition(tempVec3A);
        this.cameraComp.node.lookAt(cc_1.Vec3.ZERO);
        modelNode.getWorldPosition(tempVec3B);
        cc_1.Vec3.set(this.viewCenter, 0, 0, 0);
        this.viewDist = cc_1.Vec3.distance(tempVec3A, tempVec3B);
        cce.Engine.repaintInEditMode();
    }
    destroyNode() {
        if (this.node && (0, cc_1.isValid)(this.node, true)) {
            this.node.setParent(null);
            this.node._destroyImmediate();
            this.node = null;
        }
    }
    perfectCameraView(boundary) {
        this.viewDist = this.getFitDistance(boundary);
        this.cameraComp.node.getWorldRotation(this._curRot);
        cc_1.Vec3.transformQuat(tempVec3A, cc_1.Vec3.UNIT_Z, this._curRot);
        cc_1.Vec3.multiplyScalar(tempVec3A, tempVec3A, this.viewDist);
        cc_1.Vec3.add(tempVec3B, this.viewCenter, tempVec3A);
        this.cameraComp.node.setWorldPosition(tempVec3B);
        this.cameraComp.node.lookAt(this.viewCenter);
        cce.Engine.repaintInEditMode();
    }
    getFitDistance(boundary) {
        if (!boundary) {
            return 0;
        }
        this.viewCenter = boundary.center;
        const maxRange = boundary.halfExtents.length();
        //  为了让距离看起来更舒适
        const distScalar = 1.2;
        const fov = this.cameraComp.fov;
        const depthSize = Math.tan(((fov / 2) * Math.PI) / 180);
        const dist = (maxRange * distScalar) / depthSize;
        this.cameraComp.near = dist - maxRange;
        this.cameraComp.far = dist + maxRange;
        return dist;
    }
    onMouseDown(event) {
        this.isMouseDown = true;
        this.cameraComp.node.getWorldRotation(this._curRot);
        this.cameraComp.node.getWorldPosition(this._curPos);
        if ((event.button === cc_1.EventMouse.BUTTON_LEFT || !event.button)) {
            this.isMouseLeft = true;
        }
        this.cameraComp.node.getWorldRotation(this.curCameraRot);
    }
    onMouseMove(event) {
        if (!this.isMouseDown) {
            return;
        }
        if (this.isMouseLeft) {
            this.rotate(event.movementX | 0, event.movementY | 0);
        }
    }
    onMouseUp(event) {
        this.isMouseDown = false;
        this.isMouseLeft = false;
    }
    onMouseWheel(event) {
        this.scale(event.wheelDeltaY);
    }
    scale(delta) {
        if (this._flipWheelDirection) {
            delta = -delta;
        }
        const finalDelta = ((this.cameraComp.far - this.cameraComp.near) / 100);
        const node = this.cameraComp.node;
        const curPos = this._curPos;
        const forward = this._forward;
        const v3a = this._v3a;
        node.getWorldPosition(curPos);
        node.getWorldRotation(this._curRot);
        cc_1.Vec3.transformQuat(forward, cc_1.Vec3.UNIT_Z, this._curRot);
        cc_1.Vec3.multiplyScalar(v3a, forward, finalDelta * Math.sign(delta));
        cc_1.Vec3.add(curPos, curPos, v3a);
        makeVec3InRange(curPos, -1e12, 1e12);
        const tempDist = cc_1.Vec3.distance(curPos, this.viewCenter);
        const min = this.cameraComp.near * 2;
        const max = this.cameraComp.far / 3;
        // if (tempDist > min && max > tempDist) {
        this.viewDist = tempDist;
        node.setWorldPosition(curPos);
        // }
    }
    rotate(dx, dy) {
        if (!this.isMouseDown && !this.isMouseLeft) {
            return;
        }
        this.cameraComp.node.getWorldRotation(this._curRot);
        const rot = this._curRot;
        const euler = cc.v3();
        cc_1.Quat.rotateX(rot, rot, -dy * this.orbitRotateSpeed);
        cc_1.Quat.rotateAround(rot, rot, cc_1.Vec3.UNIT_Y, -dx * this.orbitRotateSpeed);
        cc_1.Quat.toEuler(euler, rot);
        cc_1.Quat.fromEuler(rot, euler.x, euler.y, 0); // clear rotate of z
        const offset = cc.v3(0, 0, 1);
        cc_1.Vec3.transformQuat(offset, offset, rot);
        cc_1.Vec3.normalize(offset, offset);
        cc_1.Vec3.multiplyScalar(offset, offset, this.viewDist);
        cc_1.Vec3.add(this._curPos, this.viewCenter, offset);
        this.cameraComp.node.setWorldPosition(this._curPos);
        const up = cc.v3(0, 1, 0);
        cc_1.Vec3.transformQuat(up, up, rot);
        cc_1.Vec3.normalize(up, up);
        this.cameraComp.node.lookAt(this.viewCenter, up);
    }
    setZoom(scale) {
        //向前滚动 > 0 向后滚动 < 0
        this.cameraComp.node.lookAt(this.cameraComp.camera.forward);
        this.cameraComp.node.worldPosition.add(this.cameraComp.camera.forward.multiplyScalar(scale));
        this.cameraComp.node.setWorldPosition(this.cameraComp.node.worldPosition);
        this.viewDist = cc_1.Vec3.distance(this.cameraComp.node.worldPosition, this.viewCenter);
    }
    hide() {
        this.cameraComp.enabled = false;
    }
}
exports.InteractivePreview = InteractivePreview;
//# sourceMappingURL=data:application/json;base64,