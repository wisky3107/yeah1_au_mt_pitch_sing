'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.shaderGraphPreview = void 0;
const cc_1 = require("cc");
const Interactive_preview_1 = require("./Interactive-preview");
const regions = [new cc_1.gfx.BufferTextureCopy()];
regions[0].texExtent.depth = 1;
function insertAdditionals(geometry) {
    if (!geometry.customAttributes) {
        geometry.customAttributes = [];
    }
    geometry.customAttributes.push({
        attr: new cc_1.gfx.Attribute(cc_1.gfx.AttributeName.ATTR_TANGENT, cc_1.gfx.Format.RGBA32F),
        values: EditorExtends.GeometryUtils.calculateTangents(geometry.positions, geometry.indices, geometry.normals, geometry.uvs),
    });
    return geometry;
}
const primitiveData = {
    box: {
        mesh: cc_1.utils.createMesh(insertAdditionals(cc_1.primitives.box())),
        scale: new cc_1.Vec3(1, 1, 1),
    },
    sphere: {
        mesh: cc_1.utils.createMesh(insertAdditionals(cc_1.primitives.sphere())),
        scale: new cc_1.Vec3(1, 1, 1),
    },
    capsule: {
        mesh: cc_1.utils.createMesh(insertAdditionals(cc_1.primitives.capsule())),
        scale: new cc_1.Vec3(0.8, 0.8, 0.8),
    },
    cylinder: {
        mesh: cc_1.utils.createMesh(insertAdditionals(cc_1.primitives.cylinder())),
        scale: new cc_1.Vec3(0.8, 0.8, 0.8),
    },
    torus: {
        mesh: cc_1.utils.createMesh(insertAdditionals(cc_1.primitives.torus())),
        scale: new cc_1.Vec3(1, 1, 1),
    },
    cone: {
        mesh: cc_1.utils.createMesh(insertAdditionals(cc_1.primitives.cone())),
        scale: new cc_1.Vec3(1, 1, 1),
    },
    quad: {
        mesh: cc_1.utils.createMesh(insertAdditionals(cc_1.primitives.quad())),
        scale: new cc_1.Vec3(1, 1, 1),
    },
};
const tempVec3A = new cc_1.Vec3();
const tempVec3B = new cc_1.Vec3();
const tempQuatA = new cc_1.Quat();
const _matInsInfo = {
    parent: null,
    owner: null,
    subModelIdx: 0,
};
class ShaderGraphPreview extends Interactive_preview_1.InteractivePreview {
    constructor() {
        super(...arguments);
        this.primitive = 'sphere';
        this.material = null;
        this.cacheMeshs = {};
    }
    init(registerName, queryName) {
        super.init(registerName, queryName);
        const device = cc_1.director.root.device;
        this.uniformBuffer = device.createBuffer(new cc_1.gfx.BufferInfo(cc_1.gfx.BufferUsageBit.UNIFORM, cc_1.gfx.MemoryUsageBit.HOST | cc_1.gfx.MemoryUsageBit.DEVICE, 16));
        this.dummyUniformBuffer = device.createBuffer(new cc_1.gfx.BufferViewInfo(this.uniformBuffer, 0, this.uniformBuffer.size));
        this.storageBuffer = !isSceneNative ? this.uniformBuffer : device.createBuffer(new cc_1.gfx.BufferInfo(cc_1.gfx.BufferUsageBit.STORAGE, cc_1.gfx.MemoryUsageBit.HOST | cc_1.gfx.MemoryUsageBit.DEVICE, 16));
        this.dummyStorageBuffer = !isSceneNative ? this.dummyUniformBuffer :
            device.createBuffer(new cc_1.gfx.BufferViewInfo(this.storageBuffer, 0, this.storageBuffer.size));
        this.dummySampleTexture = device.createTexture(new cc_1.gfx.TextureInfo(cc_1.gfx.TextureType.TEX2D, cc_1.gfx.TextureUsageBit.SAMPLED, cc_1.gfx.Format.RGBA8, 4, 4));
        this.dummyStorageTexture = !isSceneNative ? this.dummySampleTexture : device.createTexture(new cc_1.gfx.TextureInfo(cc_1.gfx.TextureType.TEX2D, cc_1.gfx.TextureUsageBit.STORAGE, cc_1.gfx.Format.RGBA8, 4, 4));
        this.dummySampler = device.getSampler(new cc_1.gfx.SamplerInfo());
    }
    createNodes() {
        this.lightComp = new cc.Node('Shader Graph Preview Light').addComponent(cc_1.DirectionalLight);
        this.lightComp.node.setRotationFromEuler(-45, -45, 0);
        this.lightComp.node.setParent(this.scene);
        this.modelComp = new cc_1.Node('Shader Graph Preview Model').addComponent(cc_1.MeshRenderer);
        this.modelComp.mesh = primitiveData.sphere.mesh;
        const material = new cc_1.Material();
        material.initialize({ effectName: 'builtin-standard' });
        this.modelComp.material = material;
        this.setMaterial(material);
        this.modelComp.node.setParent(this.scene);
    }
    setMaterial(material) {
        if (material && material !== this.material) {
            const comp = this.modelComp;
            _matInsInfo.parent = material;
            _matInsInfo.owner = comp;
            const instantiated = new cc_1.renderer.MaterialInstance(_matInsInfo);
            comp.material = instantiated;
            this.material = material;
            this.updateDs();
            this.cameraComp.enabled = true;
            this.cameraComp.node.getWorldPosition(tempVec3A);
            this.modelComp.node.getWorldPosition(tempVec3B);
            this.viewDist = cc_1.Vec3.distance(tempVec3A, tempVec3B);
        }
    }
    // 部分材质如果没有调用该方法会有报错，如spine相关材质
    // 大部分材质不需要调用也会正常预览
    updateDs() {
        const model = this.modelComp.model;
        if (model) {
            for (let i = 0; i < model.subModels.length; i++) {
                const ds = model.subModels[i].descriptorSet;
                const bindings = ds.layout.bindings;
                const device = cc_1.director.root.device;
                for (let j = 0; j < bindings.length; j++) {
                    const desc = bindings[j];
                    const binding = desc.binding;
                    const dsType = desc.descriptorType;
                    // bind buffer
                    if (dsType & cc_1.gfx.DescriptorType.UNIFORM_BUFFER ||
                        dsType & cc_1.gfx.DescriptorType.DYNAMIC_UNIFORM_BUFFER) {
                        if (!ds.getBuffer(binding)) {
                            ds.bindBuffer(binding, this.dummyUniformBuffer);
                        }
                    }
                    else if (dsType & cc_1.gfx.DescriptorType.STORAGE_BUFFER ||
                        dsType & cc_1.gfx.DescriptorType.DYNAMIC_STORAGE_BUFFER) {
                        if (!ds.getBuffer(binding)) {
                            ds.bindBuffer(binding, this.dummyStorageBuffer);
                        }
                    }
                    // binde texture
                    else if (dsType & cc_1.gfx.DESCRIPTOR_SAMPLER_TYPE) {
                        if (!ds.getTexture(binding)) {
                            if (dsType & cc_1.gfx.DescriptorType.SAMPLER_TEXTURE ||
                                dsType & cc_1.gfx.DescriptorType.TEXTURE) {
                                ds.bindTexture(binding, this.dummySampleTexture);
                            }
                            else if (dsType & cc_1.gfx.DescriptorType.STORAGE_IMAGE) {
                                ds.bindTexture(binding, this.dummyStorageTexture);
                            }
                        }
                        if (!ds.getSampler(binding)) {
                            ds.bindSampler(binding, this.dummySampler);
                        }
                    }
                }
                ds.update();
            }
        }
    }
    setMesh(primitive, mesh, scale = cc_1.Vec3.ONE) {
        this.modelComp.mesh = mesh;
        // 在部分情况下，该接口会先于setMaterial调用 #12259
        // 如果上个材质刚好和目标材质类型不同，就会导致引擎底层无法正确绑定纹理，从而报错
        this.updateDs();
        this.modelComp.node.setScale(scale);
        this.primitive = primitive;
        this.cameraComp.enabled = true;
    }
    setPrimitive(primitive) {
        if (primitive && primitive !== this.primitive) {
            const cacheMesh = this.cacheMeshs[primitive];
            if (!cacheMesh) {
                cc.assetManager.loadAny(primitive, (err, mesh) => {
                    if (err) {
                        return console.error(err);
                    }
                    this.cacheMeshs[primitive] = mesh;
                    this.setMesh(primitive, mesh);
                });
            }
            else {
                this.setMesh(primitive, cacheMesh);
            }
        }
    }
    setLightEnable(enable) {
        if (this.lightComp.enabled !== enable) {
            this.lightComp.enabled = enable;
        }
    }
    resetCamera() {
        super.resetCamera(this.modelComp.node);
    }
}
const shaderGraphPreview = new ShaderGraphPreview();
exports.shaderGraphPreview = shaderGraphPreview;
//# sourceMappingURL=data:application/json;base64,