"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const preview_scene_1 = tslib_1.__importDefault(require("./preview-scene"));
const shader_graph_1 = tslib_1.__importDefault(require("../importer/shader-graph"));
const effect_header_1 = require("./effect-header");
const effect_utils_1 = require("../effect-utils");
function createSlot(slot) {
    const valueDump = cce.Dump.encode.encodeObject(slot.default, { default: slot.default });
    return {
        default: valueDump.value,
        type: slot.type,
        connectType: slot.connectType,
        display: slot.display,
        enum: slot.enum,
        registerEnumType: slot.registerEnumType,
        registerEnum: slot.registerEnum,
    };
}
exports.methods = {
    async queryShaderNode() {
        const { shaderNodeMap, shaderPropertyMap } = await Editor.Module.importProjectModule('db://shader-graph/graph/index.ts');
        const shaderNodeList = new Map();
        shaderNodeMap.forEach((nodeDefine) => {
            const newNodeDefine = {
                type: nodeDefine.type,
                extend: nodeDefine.extend,
                details: nodeDefine.details,
                node: {},
            };
            nodeDefine.node.inputs?.forEach((slot) => {
                if (!newNodeDefine.node.inputs) {
                    newNodeDefine.node.inputs = [];
                }
                newNodeDefine.node.inputs.push(createSlot(slot));
            });
            nodeDefine.node.props?.forEach((slot) => {
                if (!newNodeDefine.node.props) {
                    newNodeDefine.node.props = [];
                }
                newNodeDefine.node.props.push(createSlot(slot));
            });
            nodeDefine.node.outputs?.forEach((slot) => {
                if (!newNodeDefine.node.outputs) {
                    newNodeDefine.node.outputs = [];
                }
                newNodeDefine.node.outputs.push(createSlot(slot));
            });
            shaderNodeList.set(newNodeDefine.type, newNodeDefine);
        });
        const shaderPropertyList = new Map();
        shaderPropertyMap.forEach((propertyDefine) => {
            const valueDump = cce.Dump.encode.encodeObject(propertyDefine.default, { default: propertyDefine.default });
            const newPropertyDefine = {
                name: propertyDefine.name,
                type: propertyDefine.type,
                declareType: propertyDefine.declareType,
                default: valueDump.value,
                details: propertyDefine.details,
                outputs: [],
            };
            propertyDefine.outputs.forEach((slot) => {
                newPropertyDefine.outputs.push(createSlot(slot));
            });
            shaderPropertyList.set(newPropertyDefine.type, newPropertyDefine);
        });
        return {
            shaderNodeList: [...shaderNodeList],
            shaderPropertyList: [...shaderPropertyList],
        };
    },
    async queryPropertyValueDumpByType(type, value) {
        const { shaderPropertyMap } = await Editor.Module.importProjectModule('db://shader-graph/graph/index.ts');
        const propertyDefine = shaderPropertyMap.get(type);
        const valueDump = cce.Dump.encode.encodeObject(propertyDefine.default, {});
        valueDump.value = value;
        return valueDump;
    },
    async initPreview(config) {
        try {
            await (0, effect_header_1.addChunks)();
            await preview_scene_1.default.init(config);
            return true;
        }
        catch (e) {
            console.error(e);
            return false;
        }
    },
    async updateMaterial(graphData) {
        if (!graphData)
            return;
        const time = Date.now();
        const masterNode = await shader_graph_1.default.generateMasterNode(graphData);
        const material = await masterNode.createMaterial(effect_utils_1.buildEffect);
        preview_scene_1.default.setMaterial(material);
        console.debug('update shader graph material : ' + (Date.now() - time) / 1000);
    },
    registerEffects(uuid) {
        console.debug('registerEffects: ' + uuid);
        cce.SceneFacadeManager.registerEffects([uuid]);
    },
    removeEffects(uuid) {
        console.debug('removeEffects:' + uuid);
        cce.SceneFacadeManager.removeEffects([uuid]);
    },
    updateEffect(uuid) {
        console.debug('updateEffect:' + uuid);
        cce.SceneFacadeManager.updateEffect([uuid]);
    },
};
//# sourceMappingURL=data:application/json;base64,