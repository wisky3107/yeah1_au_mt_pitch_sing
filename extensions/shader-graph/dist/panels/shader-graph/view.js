"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vue_js_1 = require("vue/dist/vue.js");
const mask_1 = require("./mask");
const float_windows_1 = require("./float-windows");
const shader_graph_1 = require("../../shader-graph");
exports.default = (0, vue_js_1.defineComponent)({
    props: {},
    setup(props, ctx) {
        // 遮罩逻辑
        const mask = (0, mask_1.maskLogic)(props, ctx);
        const floatWindows = (0, float_windows_1.floatWindowsLogic)(props, ctx);
        const showCreateNewMenu = (0, vue_js_1.ref)(false);
        const dirtyRef = (0, vue_js_1.ref)();
        const shaderGraphRef = (0, vue_js_1.ref)();
        const forgeRef = (0, vue_js_1.ref)();
        const foregroundRef = (0, vue_js_1.ref)();
        const dragAreaRef = (0, vue_js_1.ref)();
        function onDirty(dirty) {
            if (dirty) {
                dirtyRef.value?.removeAttribute('hidden');
            }
            else {
                dirtyRef.value?.setAttribute('hidden', '');
            }
        }
        (0, vue_js_1.onMounted)(() => {
            shader_graph_1.MessageMgr.Instance.register(shader_graph_1.MessageType.DirtyChanged, onDirty);
            shader_graph_1.MessageMgr.Instance.register(shader_graph_1.MessageType.DraggingProperty, onDrag);
            if (forgeRef.value && shaderGraphRef.value) {
                const resizeObserver = new ResizeObserver(entries => {
                    // 在尺寸变化时执行的回调函数
                    entries.forEach(entry => {
                        if (entry.target === forgeRef.value) {
                            shader_graph_1.MessageMgr.Instance.send(shader_graph_1.MessageType.Resize);
                        }
                    });
                });
                // 将 ResizeObserver 添加到要观察的元素上
                resizeObserver.observe(forgeRef.value);
                shader_graph_1.GraphEditorMgr.Instance.setGraphForge(forgeRef.value);
                // 用于获取鼠标的坐标
                shader_graph_1.GraphEditorMgr.Instance.addMousePointerListener(shaderGraphRef.value);
                shader_graph_1.GraphDataMgr.Instance.setGraphForge(forgeRef.value);
                shader_graph_1.GraphConfigMgr.Instance.setGraphForge(forgeRef.value);
                shader_graph_1.ForgeMgr.Instance.setGraphForge(forgeRef.value);
            }
            shader_graph_1.GraphAssetMgr.Instance.openAsset();
        });
        (0, vue_js_1.onUnmounted)(() => {
            shader_graph_1.MessageMgr.Instance.unregister(shader_graph_1.MessageType.DirtyChanged, onDirty);
            shader_graph_1.MessageMgr.Instance.unregister(shader_graph_1.MessageType.DraggingProperty, onDrag);
        });
        function onReset() {
            shader_graph_1.GraphDataMgr.Instance.restore();
        }
        function onSave() {
            shader_graph_1.GraphAssetMgr.Instance.save();
        }
        function onDrag() {
            foregroundRef.value?.removeAttribute('disallowed-event');
            dragAreaRef.value?.removeAttribute('disallowed-event');
        }
        function onDragEnd(event) {
            foregroundRef.value?.setAttribute('disallowed-event', '');
            dragAreaRef.value?.setAttribute('disallowed-event', '');
            const value = event.dataTransfer?.getData('value');
            const options = value && JSON.parse(value);
            if (options) {
                const { x, y } = shader_graph_1.GraphEditorMgr.Instance.convertsMousePoint(event.x, event.y - 28);
                options.x = x;
                options.y = y;
                shader_graph_1.GraphEditorMgr.Instance.add(options);
            }
        }
        function onChangeCreateNewMenu(show) {
            showCreateNewMenu.value = show;
        }
        return {
            dirtyRef,
            forgeRef,
            foregroundRef,
            dragAreaRef,
            shaderGraphRef,
            onReset,
            onSave,
            onDragEnd,
            showCreateNewMenu,
            onChangeCreateNewMenu,
            ...mask,
            ...floatWindows,
        };
    },
});
//# sourceMappingURL=data:application/json;base64,