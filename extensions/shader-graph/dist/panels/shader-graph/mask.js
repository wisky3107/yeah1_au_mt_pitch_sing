"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.maskLogic = void 0;
const vue_js_1 = require("vue/dist/vue.js");
const shader_graph_1 = require("../../shader-graph");
/**
 * 用于提示引导用户处理相关操作例如（打开，导入，覆盖）
 * @param props
 * @param ctx
 */
const maskLogic = (props, ctx) => {
    const maskRef = (0, vue_js_1.ref)();
    const displayMaskType = (0, vue_js_1.ref)(shader_graph_1.MaskMgr.Instance.displayMaskType);
    const createNewList = (0, vue_js_1.ref)([
        {
            type: 'Surface',
            label: Editor.I18n.t('shader-graph.buttons.new') + 'Surface',
        },
        {
            type: 'Unlit',
            label: Editor.I18n.t('shader-graph.buttons.new') + 'Unlit',
        },
    ]);
    function onUpdateMask(nextMaskType) {
        displayMaskType.value = nextMaskType;
        changeMaskDisplay();
    }
    function changeMaskDisplay() {
        if (!maskRef.value)
            return;
        if (displayMaskType.value === shader_graph_1.MaskType.None) {
            maskRef.value.removeAttribute('show');
        }
        else {
            maskRef.value.setAttribute('show', '');
        }
    }
    // Test Code
    // document.addEventListener('keydown', (event) => {
    //     let nextMaskType = MaskType.None;
    //     switch (event.code) {
    //         case 'Digit1':
    //             nextMaskType = MaskType.WaitSceneReady;
    //             break;
    //         case 'Digit2':
    //             nextMaskType = MaskType.AssetMissing;
    //             break;
    //         case 'Digit3':
    //             nextMaskType = MaskType.AssetChange;
    //             break;
    //         case 'Digit4':
    //             nextMaskType = MaskType.NeedCreateNewAsset;
    //             break;
    //         case 'Digit5':
    //             nextMaskType = MaskType.NeedSaveBeReloadByRename;
    //             break;
    //     }
    //     onUpdateMask(nextMaskType);
    // });
    (0, vue_js_1.onMounted)(() => {
        changeMaskDisplay();
        shader_graph_1.MessageMgr.Instance.register(shader_graph_1.MessageType.UpdateMask, onUpdateMask);
    });
    (0, vue_js_1.onUnmounted)(() => {
        shader_graph_1.MessageMgr.Instance.unregister(shader_graph_1.MessageType.UpdateMask, onUpdateMask);
    });
    async function onSaveAs() {
        shader_graph_1.GraphAssetMgr.Instance.saveAs().then((done) => {
            done && shader_graph_1.MaskMgr.Instance.updateMask();
        });
    }
    async function onCreateNew(type) {
        shader_graph_1.GraphAssetMgr.Instance.createNew(type).then((done) => {
            done && shader_graph_1.MaskMgr.Instance.updateMask();
        });
    }
    async function onOpen() {
        shader_graph_1.GraphAssetMgr.Instance.open().then((done) => {
            done && shader_graph_1.MaskMgr.Instance.updateMask();
        });
    }
    async function onReload() {
        shader_graph_1.GraphAssetMgr.Instance.load().then((done) => {
            done && shader_graph_1.MaskMgr.Instance.updateMask();
        });
    }
    async function onOverride() {
        shader_graph_1.GraphAssetMgr.Instance.save().then((done) => {
            done && shader_graph_1.MaskMgr.Instance.updateMask();
        });
    }
    async function onSaveAndReloadByRename() {
        shader_graph_1.GraphAssetMgr.Instance.save().then(() => {
            shader_graph_1.GraphAssetMgr.Instance.load().then((done) => {
                done && shader_graph_1.MaskMgr.Instance.updateMask();
            });
        });
    }
    async function onCancel() {
        shader_graph_1.MaskMgr.Instance.updateMask();
    }
    return {
        onOpen,
        onSaveAs,
        onCreateNew,
        onReload,
        onOverride,
        onCancel,
        onSaveAndReloadByRename,
        maskRef,
        createNewList,
        // mask
        MaskType: shader_graph_1.MaskType,
        displayMaskType,
    };
};
exports.maskLogic = maskLogic;
//# sourceMappingURL=data:application/json;base64,