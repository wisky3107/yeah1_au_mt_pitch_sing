"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.floatWindowsLogic = void 0;
const vue_js_1 = require("vue/dist/vue.js");
const float_window_1 = require("./components/float-window");
const shader_graph_1 = require("../../shader-graph");
const vue_1 = require("vue");
const floatWindowsLogic = (props, ctx) => {
    const tabRefs = (0, vue_js_1.ref)([]);
    const floatWindowRefs = (0, vue_js_1.ref)([]);
    const pressTabRefs = new Map();
    const floatWindowMap = (0, float_window_1.getFloatWindowMap)();
    const floatWindowConfigList = (0, vue_js_1.ref)([]);
    function onFloatWindowConfigChanged() {
        (0, float_window_1.updateFloatWindowConfigs)().then((configs) => {
            floatWindowConfigList.value = configs;
        });
    }
    shader_graph_1.MessageMgr.Instance.register(shader_graph_1.MessageType.AssetLoaded, () => {
        initFloatWindowConfigs();
    });
    (0, vue_js_1.onMounted)(() => {
        shader_graph_1.MessageMgr.Instance.register([
            shader_graph_1.MessageType.FloatWindowConfigChanged,
        ], onFloatWindowConfigChanged);
    });
    (0, vue_js_1.onUnmounted)(() => {
        shader_graph_1.MessageMgr.Instance.unregister([
            shader_graph_1.MessageType.FloatWindowConfigChanged,
        ], onFloatWindowConfigChanged);
    });
    function getFloatWindowByKey(key) {
        return floatWindowMap.get(key) ?? undefined;
    }
    function initFloatWindowConfigs() {
        (0, float_window_1.updateFloatWindowConfigs)().then((configs) => {
            floatWindowConfigList.value = configs;
            (0, vue_1.nextTick)(() => {
                floatWindowRefs.value.forEach((floatWindowRef) => {
                    shader_graph_1.GraphConfigMgr.Instance.addFloatWindow(floatWindowRef.config.key, floatWindowRef.$el);
                });
                floatWindowConfigList.value.forEach((config, index) => {
                    if (config.base.defaultShow || config.details?.show) {
                        pressTab(tabRefs.value[index], floatWindowRefs.value[index], config.key);
                    }
                    else {
                        releaseTab(floatWindowRefs.value[index]);
                    }
                });
            });
        });
    }
    function pressTab(tabRef, floatWindowRef, key) {
        if (tabRef && floatWindowRef) {
            floatWindowRef.show();
            pressTabRefs.set(key, tabRef);
            tabRef.setAttribute('pressed', '');
        }
    }
    function releaseTab(floatWindowRef) {
        floatWindowRef.hide();
        onHideFloatWindow(floatWindowRef.config.key);
    }
    ///// 右边 tab 菜单
    function togglePressTab(key, index) {
        // 当前按下的 tab
        const tabRef = tabRefs.value[index];
        const floatWindowRef = floatWindowRefs.value[index];
        if (tabRef && floatWindowRef) {
            if (tabRef.getAttribute('pressed') !== null) {
                releaseTab(floatWindowRef);
            }
            else {
                pressTab(tabRef, floatWindowRef, key);
            }
        }
    }
    function getStyle(tab) {
        const style = {};
        if (tab.height !== undefined) {
            style.height = tab.height + 'px';
        }
        return style;
    }
    function onHideFloatWindow(key) {
        const tabRef = pressTabRefs.get(key);
        if (tabRef) {
            tabRef.removeAttribute('pressed');
            pressTabRefs.delete(key);
        }
    }
    /////
    return {
        tabRefs,
        floatWindowRefs,
        floatWindowConfigList,
        onHideFloatWindow,
        togglePressTab,
        getFloatWindowByKey,
        getStyle,
    };
};
exports.floatWindowsLogic = floatWindowsLogic;
//# sourceMappingURL=data:application/json;base64,