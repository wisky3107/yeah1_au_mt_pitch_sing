"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDragEvent = void 0;
let onDragStartHeaderEvent;
/**
 * 添加 header 拖动时间
 * @param options
 */
function useDragEvent(options) {
    const { target, $window, config } = options;
    if (!config.events.drag) {
        target.removeEventListener('mousedown', onDragStartHeaderEvent, false);
        target.removeAttribute('style');
        return;
    }
    if (target.getAttribute('has-drag-event') !== null)
        return;
    const parentElement = $window.parentElement;
    onDragStartHeaderEvent = function (event) {
        event.stopPropagation();
        const parentElementRect = parentElement.getBoundingClientRect();
        const windowRect = $window.getBoundingClientRect();
        const pointX = event.clientX;
        const pointY = event.clientY;
        const uiGraphForge = parentElement.parentElement?.querySelector('ui-graph-forge')?.shadowRoot;
        const uiGraphForgeHeaderHeight = uiGraphForge?.querySelector('header')?.clientHeight || 28;
        // 当前窗口的位置
        const start = {
            left: $window.offsetLeft,
            top: $window.offsetTop,
        };
        const minX = 0;
        const minY = uiGraphForgeHeaderHeight;
        const maxX = parentElement.offsetWidth + parentElement.offsetLeft - windowRect.width;
        const maxY = parentElement.offsetHeight - parentElement.offsetTop - windowRect.height;
        const tabs = $window.parentNode?.parentNode?.querySelector('.right-tabs');
        const tabsRect = tabs?.getBoundingClientRect();
        function drag(event) {
            const x = start.left + (event.clientX - pointX);
            const y = start.top + (event.clientY - pointY);
            let newX = 0, newY = 0;
            if (config.events.limitless) {
                newX = x;
                newY = y;
            }
            else {
                newY = Math.min(Math.max(minY, y), maxY);
                newX = Math.min(Math.max(minX, x), maxX - (tabsRect?.width || 0));
            }
            $window.style.left = `${newX}px`;
            $window.style.top = `${newY}px`;
            options.onChange && options.onChange($window.style);
        }
        function dragEnd() {
            document.removeEventListener('mousemove', drag, true);
            document.removeEventListener('mouseup', dragEnd, true);
        }
        document.addEventListener('mousemove', drag, true);
        document.addEventListener('mouseup', dragEnd, true);
    };
    target.addEventListener('mousedown', onDragStartHeaderEvent, false);
    target.setAttribute('style', 'cursor: move;');
    target.setAttribute('has-drag-event', '');
}
exports.useDragEvent = useDragEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3BhbmVscy9zaGFkZXItZ3JhcGgvY29tcG9uZW50cy9mbG9hdC13aW5kb3cvYmFzZS9oZWFkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBa0JBLElBQUksc0JBQW1ELENBQUM7QUFFeEQ7OztHQUdHO0FBQ0gsU0FBZ0IsWUFBWSxDQUFDLE9BQTJCO0lBQ3BELE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUU1QyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDckIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxzQkFBc0IsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2RSxNQUFNLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hDLE9BQU87S0FDVjtJQUVELElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLElBQUk7UUFBRSxPQUFPO0lBRTNELE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxhQUFjLENBQUM7SUFFN0Msc0JBQXNCLEdBQUcsVUFBUyxLQUFpQjtRQUMvQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFeEIsTUFBTSxpQkFBaUIsR0FBRyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNoRSxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNuRCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQzdCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFFN0IsTUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxVQUFVLENBQUM7UUFDOUYsTUFBTSx3QkFBd0Is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IEZsb2F0V2luZG93Q29uZmlnIH0gZnJvbSAnLi4vaW50ZXJuYWwnO1xuXG4vKipcbiAqIEBwYXJhbSBoZWFkZXJcbiAqIEBwYXJhbSBsaW1pdGVkQXJlYUVsZW1lbnRcbiAqIEBwYXJhbSAkd2luZG93IC0g5b2T5YmN56qX5Y+j5a+56LGhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUhlYWRlckRyYWdPcHRpb25zIHtcbiAgICAvLyDpnIDopoHmi5bliqjnmoTlr7nosaFcbiAgICB0YXJnZXQ6IEhUTUxEaXZFbGVtZW50O1xuICAgIC8vIOW9k+WJjeeql+WPo+WvueixoVxuICAgICR3aW5kb3c6IEhUTUxEaXZFbGVtZW50O1xuICAgIC8vIOmFjee9rlxuICAgIGNvbmZpZzogRmxvYXRXaW5kb3dDb25maWc7XG4gICAgb25DaGFuZ2U/OiAoc3R5bGU6IENTU1N0eWxlRGVjbGFyYXRpb24pID0+IHZvaWQ7XG5cbn1cblxubGV0IG9uRHJhZ1N0YXJ0SGVhZGVyRXZlbnQ6IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZDtcblxuLyoqXG4gKiDmt7vliqAgaGVhZGVyIOaLluWKqOaXtumXtFxuICogQHBhcmFtIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZURyYWdFdmVudChvcHRpb25zOiBJSGVhZGVyRHJhZ09wdGlvbnMpIHtcbiAgICBjb25zdCB7IHRhcmdldCwgJHdpbmRvdywgY29uZmlnIH0gPSBvcHRpb25zO1xuXG4gICAgaWYgKCFjb25maWcuZXZlbnRzLmRyYWcpIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uRHJhZ1N0YXJ0SGVhZGVyRXZlbnQsIGZhbHNlKTtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0YXJnZXQuZ2V0QXR0cmlidXRlKCdoYXMtZHJhZy1ldmVudCcpICE9PSBudWxsKSByZXR1cm47XG5cbiAgICBjb25zdCBwYXJlbnRFbGVtZW50ID0gJHdpbmRvdy5wYXJlbnRFbGVtZW50ITtcblxuICAgIG9uRHJhZ1N0YXJ0SGVhZGVyRXZlbnQgPSBmdW5jdGlvbihldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBjb25zdCBwYXJlbnRFbGVtZW50UmVjdCA9IHBhcmVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IHdpbmRvd1JlY3QgPSAkd2luZG93LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBwb2ludFggPSBldmVudC5jbGllbnRYO1xuICAgICAgICBjb25zdCBwb2ludFkgPSBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIGNvbnN0IHVpR3JhcGhGb3JnZSA9IHBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudD8ucXVlcnlTZWxlY3RvcigndWktZ3JhcGgtZm9yZ2UnKT8uc2hhZG93Um9vdDtcbiAgICAgICAgY29uc3QgdWlHcmFwaEZvcmdlSGVhZGVySGVpZ2h0ID0gdWlHcmFwaEZvcmdlPy5xdWVyeVNlbGVjdG9yKCdoZWFkZXInKT8uY2xpZW50SGVpZ2h0IHx8IDI4O1xuXG4gICAgICAgIC8vIOW9k+WJjeeql+WPo+eahOS9jee9rlxuICAgICAgICBjb25zdCBzdGFydCA9IHtcbiAgICAgICAgICAgIGxlZnQ6ICR3aW5kb3cub2Zmc2V0TGVmdCxcbiAgICAgICAgICAgIHRvcDogJHdpbmRvdy5vZmZzZXRUb3AsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbWluWCA9IDA7XG4gICAgICAgIGNvbnN0IG1pblkgPSB1aUdyYXBoRm9yZ2VIZWFkZXJIZWlnaHQ7XG4gICAgICAgIGNvbnN0IG1heFggPSBwYXJlbnRFbGVtZW50Lm9mZnNldFdpZHRoICsgcGFyZW50RWxlbWVudC5vZmZzZXRMZWZ0IC0gd2luZG93UmVjdC53aWR0aDtcbiAgICAgICAgY29uc3QgbWF4WSA9IHBhcmVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gcGFyZW50RWxlbWVudC5vZmZzZXRUb3AgLSB3aW5kb3dSZWN0LmhlaWdodDtcblxuICAgICAgICBjb25zdCB0YWJzID0gJHdpbmRvdy5wYXJlbnROb2RlPy5wYXJlbnROb2RlPy5xdWVyeVNlbGVjdG9yKCcucmlnaHQtdGFicycpO1xuICAgICAgICBjb25zdCB0YWJzUmVjdCA9IHRhYnM/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGRyYWcoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBzdGFydC5sZWZ0ICsgKGV2ZW50LmNsaWVudFggLSBwb2ludFgpO1xuICAgICAgICAgICAgY29uc3QgeSA9IHN0YXJ0LnRvcCArIChldmVudC5jbGllbnRZIC0gcG9pbnRZKTtcblxuICAgICAgICAgICAgbGV0IG5ld1ggPSAwLCBuZXdZID0gMDtcbiAgICAgICAgICAgIGlmIChjb25maWcuZXZlbnRzLmxpbWl0bGVzcykge1xuICAgICAgICAgICAgICAgIG5ld1ggPSB4O1xuICAgICAgICAgICAgICAgIG5ld1kgPSB5O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdZID0gTWF0aC5taW4oTWF0aC5tYXgobWluWSwgeSksIG1heFkpO1xuICAgICAgICAgICAgICAgIG5ld1ggPSBNYXRoLm1pbihNYXRoLm1heChtaW5YLCB4KSwgbWF4WCAtICh0YWJzUmVjdD8ud2lkdGggfHwgMCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkd2luZG93LnN0eWxlLmxlZnQgPSBgJHtuZXdYfXB4YDtcbiAgICAgICAgICAgICR3aW5kb3cuc3R5bGUudG9wID0gYCR7bmV3WX1weGA7XG5cbiAgICAgICAgICAgIG9wdGlvbnMub25DaGFuZ2UgJiYgb3B0aW9ucy5vbkNoYW5nZSgkd2luZG93LnN0eWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRyYWdFbmQoKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkcmFnLCB0cnVlKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBkcmFnRW5kLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGRyYWcsIHRydWUpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZHJhZ0VuZCwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkRyYWdTdGFydEhlYWRlckV2ZW50LCBmYWxzZSk7XG4gICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnY3Vyc29yOiBtb3ZlOycpO1xuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2hhcy1kcmFnLWV2ZW50JywgJycpO1xufVxuIl19