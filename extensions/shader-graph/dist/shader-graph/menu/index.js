"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Menu = void 0;
const tslib_1 = require("tslib");
const events_1 = tslib_1.__importDefault(require("events"));
const remote_1 = require("@electron/remote");
const utils_1 = require("../utils");
const base_menu_1 = require("./template/base-menu");
const base_1 = require("../base");
class Menu extends events_1.default {
    constructor() {
        super(...arguments);
        this.setTimeoutId = null;
        this.nodeMenuItems = [];
        this.nodeMenuItemDataMap = new Map();
        this.popupCreateMenu = () => {
            // 如果在面板内才弹菜单
            const window = (0, remote_1.getCurrentWindow)();
            const point = remote_1.screen.getCursorScreenPoint();
            if (!(0, utils_1.contains)(point, window.getBounds()))
                return;
            base_1.MessageMgr.Instance.send(base_1.MessageType.ShowCreateNodeWindow);
        };
    }
    static get Instance() {
        if (!this._instance) {
            this._instance = new Menu();
        }
        return this._instance;
    }
    emitMenuItemChange() {
        this.setTimeoutId && clearTimeout(this.setTimeoutId);
        this.setTimeoutId = setTimeout(() => {
            base_1.MessageMgr.Instance.send(base_1.MessageType.CreateMenuChange);
        }, 50);
    }
    addItemPath(path, data) {
        if (!this.nodeMenuItems.includes(path)) {
            this.nodeMenuItems.push(path);
        }
        this.nodeMenuItemDataMap.set(path, data);
        this.emitMenuItemChange();
    }
    removeItemPath(path) {
        const index = this.nodeMenuItems.indexOf(path);
        if (index !== -1) {
            this.nodeMenuItems.splice(index, 1);
            this.nodeMenuItemDataMap.delete(path);
            this.emitMenuItemChange();
        }
    }
    getShaderNodeMenu(onClick) {
        const menuItems = [];
        const menu = (menuPath) => {
            // 解析菜单路径字符串为菜单项数组
            function parseMenuPath(menuPath) {
                return menuPath.split('/').map((label) => ({ label }));
            }
            // 循环迭代方式构建菜单项
            const buildMenuIteratively = (paths, currentMenuItems, baseMenuPath, fullMenuPath) => {
                const label = paths.shift();
                if (!label)
                    return;
                if (!fullMenuPath) {
                    fullMenuPath = label;
                }
                else {
                    fullMenuPath += '/' + label;
                }
                let menuItem = currentMenuItems.find(item => item.label === label);
                if (!menuItem) {
                    menuItem = { label, submenu: [] };
                    currentMenuItems.push(menuItem);
                }
                if (paths.length === 0) {
                    const addOptions = this.nodeMenuItemDataMap.get(baseMenuPath);
                    menuItem.addOptions = addOptions;
                    if (onClick) {
                        delete menuItem.submenu;
                        menuItem.click = () => {
                            onClick(addOptions);
                        };
                    }
                }
                buildMenuIteratively(paths, menuItem.submenu, baseMenuPath, fullMenuPath);
            };
            // 传入菜单路径字符串，构建相应的菜单项
            const menuPathItems = parseMenuPath(menuPath);
            // 使用循环迭代方式构建菜单项
            buildMenuIteratively(menuPath.split('/'), menuItems, menuPath, '');
        };
        this.nodeMenuItems.forEach((menuPath) => menu(menuPath));
        return menuItems;
    }
    popupMenu(event) {
        const menu = (0, base_menu_1.getBaseMenuItem)(event, this.popupCreateMenu);
        Editor.Menu.popup({ menu });
        return true;
    }
}
exports.Menu = Menu;
Menu._instance = null;
//# sourceMappingURL=data:application/json;base64,