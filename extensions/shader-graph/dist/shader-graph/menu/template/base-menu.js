"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBaseMenuItem = void 0;
const event_1 = require("../../../block-forge/event");
const base_1 = require("../../base");
const global_exports_1 = require("../../global-exports");
function getBaseMenuItem(event, popupCreateMenu) {
    let uuid = '';
    let data;
    let isLine = false;
    const isMulti = false;
    let isGroup = false;
    const options = [];
    if (event instanceof event_1.BlockMouseEvent) {
        isGroup = event.block.type === global_exports_1.SUB_GRAPH_NODE_TYPE;
        uuid = event.target.getAttribute('node-uuid') || '';
        options.push({
            uuid: uuid,
            blockData: event.block,
        });
    }
    else if (event instanceof event_1.LineMouseEvent) {
        uuid = event.target.parentElement?.getAttribute('line-uuid') || '';
        options.push({
            uuid: uuid,
            lineData: event.line,
        });
        isLine = true;
    }
    return [
        {
            label: Editor.I18n.t('shader-graph.right_menu.create_node'),
            enabled: !uuid,
            visible: !isLine,
            accelerator: 'Space',
            click: () => {
                popupCreateMenu();
            },
        },
        { type: 'separator' },
        {
            label: Editor.I18n.t('shader-graph.right_menu.paste'),
            enabled: !base_1.GraphEditorMgr.Instance.clipboardIsNull && uuid === '' && !isLine,
            accelerator: 'CmdOrCtrl+V',
            visible: !isLine,
            click: () => {
                base_1.GraphEditorMgr.Instance.paste();
            },
        },
        {
            label: Editor.I18n.t('shader-graph.right_menu.delete'),
            accelerator: 'Delete',
            enabled: uuid !== '',
            click: () => {
                base_1.GraphEditorMgr.Instance.delete(options);
            },
        },
        {
            label: Editor.I18n.t('shader-graph.right_menu.copy'),
            accelerator: 'CmdOrCtrl+C',
            enabled: uuid !== '' && !isLine,
            visible: !isLine,
            click: () => {
                base_1.GraphEditorMgr.Instance.copy(options);
            },
        },
        {
            label: Editor.I18n.t('shader-graph.right_menu.duplicate'),
            accelerator: 'CmdOrCtrl+D',
            enabled: uuid !== '' && !isLine,
            visible: !isLine,
            click: () => {
                base_1.GraphEditorMgr.Instance.duplicate(options);
            },
        },
        { type: 'separator' },
        {
            label: Editor.I18n.t('shader-graph.right_menu.zoom_to_fit'),
            enabled: uuid === '',
            visible: !isLine,
            click: () => {
                base_1.GraphEditorMgr.Instance.zoomToFit();
            },
        },
        {
            label: Editor.I18n.t('shader-graph.right_menu.reset'),
            enabled: uuid === '',
            visible: !isLine,
            click: () => {
                base_1.GraphEditorMgr.Instance.reset();
            },
        },
    ];
}
exports.getBaseMenuItem = getBaseMenuItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1tZW51LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NoYWRlci1ncmFwaC9tZW51L3RlbXBsYXRlL2Jhc2UtbWVudS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxzREFBOEY7QUFDOUYscUNBQXFFO0FBQ3JFLHlEQUEyRDtBQUUzRCxTQUFnQixlQUFlLENBQUMsS0FBeUQsRUFBRSxlQUEyQjtJQUNsSCxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7SUFDZCxJQUFJLElBQWUsQ0FBQztJQUNwQixJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDbkIsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztJQUVwQixNQUFNLE9BQU8sR0FBOEIsRUFBRSxDQUFDO0lBQzlDLElBQUksS0FBSyxZQUFZLHVCQUFlLEVBQUU7UUFDbEMsT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLG9DQUFtQixDQUFDO1FBQ25ELElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEQsT0FBTyxDQUFDLElBQUksQ0FBQztZQUNULElBQUksRUFBRSxJQUFJO1lBQ1YsU0FBUyxFQUFFLEtBQUssQ0FBQyxLQUFLO1NBQ3pCLENBQUMsQ0FBQztLQUNOO1NBQU0sSUFBSSxLQUFLLFlBQVksc0JBQWMsRUFBRTtRQUN4QyxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuRSxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ1QsSUFBSSxFQUFFLElBQUk7WUFDVixRQUFRLEVBQUUsS0FBSyxDQUFDLElBQUk7U0FDdkIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxHQUFHLElBQUksQ0FBQztLQUNqQjtJQUVELE9BQU87UUFDSDtZQUNJLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxxQ0FBcUMsQ0FBQztZQUMzRCxPQUFPLEVBQUUsQ0FBQyxJQUFJO1lBQ2QsT0FBTyxFQUFFLENBQUMsTUFBTTtZQUNoQixXQUFXLEVBQUUsT0FBTztZQUNwQixLQUFLLEVBQUUsR0FBRyxFQUFFO2dCQUNSLGVBQWUsRUFBRSxDQUFDO1lBQ3RCLENBQUM7U0FDSjtRQUNELEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRTtRQUNyQjtZQUNJLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQywrQkFBK0IsQ0FBQztZQUNyRCxPQUFPLEVBQUUsQ0FBQyxxQkFBYyxDQUFDLFFBQVEsQ0FBQyxlQUFlLElBQUksSUFBSSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDM0UsV0FBVyxFQUFFLGFBQWE7WUFDMUIsT0FBTyxFQUFFLENBQUMsTUFBTTtZQUNoQixLQUFLLEVBQUUsR0FBRyxFQUFFO2dCQUNSLHFCQUFjLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3BDLENBQUM7U0FDSjtRQUNEO1lBQ0ksS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdDQUFnQyxDQUFDO1lBQ3RELFdBQVcsRUFBRSxRQUFRO1lBQ3JCLE9BQU8sRUFBRSxJQUFJLEtBQUssRUFBRTtZQUNwQixLQUFLLEVBQUUsR0FBRyxFQUFFO2dCQUNSLHFCQUFjLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBRSxPQUFPLENBQUMsQ0FBQztZQUM3QyxDQUFDO1NBQ0o7UUFDRDtZQUNJLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyw4QkFBOEIsQ0FBQztZQUNwRCxXQUFXLEVBQUUsYUFBYTtZQUMxQixPQUFPLEVBQUUsSUFBSSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDL0IsT0FBTyxFQUFFLENBQUMsTUFBTTtZQUNoQixLQUFLLEVBQUUsR0FBRyxFQUFFO2dCQUNSLHFCQUFjLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQyxDQUFDO1NBQ0o7UUFDRDtZQUNJLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQztZQUN6RCxXQUFXLEVBQUUsYUFBYTtZQUMxQixPQUFPLEVBQUUsSUFBSSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDL0IsT0FBTyxFQUFFLENBQUMsTUFBTTtZQUNoQixLQUFLLEVBQUUsR0FBRyxFQUFFO2dCQUNSLHFCQUFjLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMvQyxDQUFDO1NBQ0o7UUFDRCxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUU7UUFDckI7WUFDSSxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMscUNBQXFDLENBQUM7WUFDM0QsT0FBTyxFQUFFLElBQUksS0FBSyxFQUFFO1lBQ3BCLE9BQU8sRUFBRSxDQUFDLE1BQU07WUFDaEIsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDUixxQkFBYyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN4QyxDQUFDO1NBQ0o7UUFDRDtZQUNJLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQywrQkFBK0IsQ0FBQztZQUNyRCxPQUFPLEVBQUUsSUFBSSxLQUFLLEVBQUU7WUFDcEIsT0FBTyxFQUFFLENBQUMsTUFBTTtZQUNoQixLQUFLLEVBQUUsR0FBRyxFQUFFO2dCQUNSLHFCQUFjLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3BDLENBQUM7U0FDSjtLQUNKLENBQUM7QUFDTixDQUFDO0FBeEZELDBDQXdGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQmxvY2tEYXRhIH0gZnJvbSAnLi4vLi4vLi4vYmxvY2stZm9yZ2UvaW50ZXJmYWNlJztcblxuaW1wb3J0IHsgQmxvY2tNb3VzZUV2ZW50LCBHcmFwaE1vdXNlRXZlbnQsIExpbmVNb3VzZUV2ZW50IH0gZnJvbSAnLi4vLi4vLi4vYmxvY2stZm9yZ2UvZXZlbnQnO1xuaW1wb3J0IHsgR3JhcGhFZGl0b3JNZ3IsIEdyYXBoRWRpdG9yT3RoZXJPcHRpb25zIH0gZnJvbSAnLi4vLi4vYmFzZSc7XG5pbXBvcnQgeyBTVUJfR1JBUEhfTk9ERV9UWVBFIH0gZnJvbSAnLi4vLi4vZ2xvYmFsLWV4cG9ydHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFzZU1lbnVJdGVtKGV2ZW50OiBCbG9ja01vdXNlRXZlbnQgfCBHcmFwaE1vdXNlRXZlbnQgfCBMaW5lTW91c2VFdmVudCwgcG9wdXBDcmVhdGVNZW51OiAoKSA9PiB2b2lkKTogRWRpdG9yLk1lbnUuQ29udGV4dE1lbnVJdGVtW10ge1xuICAgIGxldCB1dWlkID0gJyc7XG4gICAgbGV0IGRhdGE6IEJsb2NrRGF0YTtcbiAgICBsZXQgaXNMaW5lID0gZmFsc2U7XG4gICAgY29uc3QgaXNNdWx0aSA9IGZhbHNlO1xuICAgIGxldCBpc0dyb3VwID0gZmFsc2U7XG5cbiAgICBjb25zdCBvcHRpb25zOiBHcmFwaEVkaXRvck90aGVyT3B0aW9uc1tdID0gW107XG4gICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgQmxvY2tNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlzR3JvdXAgPSBldmVudC5ibG9jay50eXBlID09PSBTVUJfR1JBUEhfTk9ERV9UWVBFO1xuICAgICAgICB1dWlkID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnbm9kZS11dWlkJykgfHwgJyc7XG4gICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICB1dWlkOiB1dWlkLFxuICAgICAgICAgICAgYmxvY2tEYXRhOiBldmVudC5ibG9jayxcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChldmVudCBpbnN0YW5jZW9mIExpbmVNb3VzZUV2ZW50KSB7XG4gICAgICAgIHV1aWQgPSBldmVudC50YXJnZXQucGFyZW50RWxlbWVudD8uZ2V0QXR0cmlidXRlKCdsaW5lLXV1aWQnKSB8fCAnJztcbiAgICAgICAgb3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIHV1aWQ6IHV1aWQsXG4gICAgICAgICAgICBsaW5lRGF0YTogZXZlbnQubGluZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlzTGluZSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6IEVkaXRvci5JMThuLnQoJ3NoYWRlci1ncmFwaC5yaWdodF9tZW51LmNyZWF0ZV9ub2RlJyksXG4gICAgICAgICAgICBlbmFibGVkOiAhdXVpZCxcbiAgICAgICAgICAgIHZpc2libGU6ICFpc0xpbmUsXG4gICAgICAgICAgICBhY2NlbGVyYXRvcjogJ1NwYWNlJyxcbiAgICAgICAgICAgIGNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcG9wdXBDcmVhdGVNZW51KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7IHR5cGU6ICdzZXBhcmF0b3InIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiBFZGl0b3IuSTE4bi50KCdzaGFkZXItZ3JhcGgucmlnaHRfbWVudS5wYXN0ZScpLFxuICAgICAgICAgICAgZW5hYmxlZDogIUdyYXBoRWRpdG9yTWdyLkluc3RhbmNlLmNsaXBib2FyZElzTnVsbCAmJiB1dWlkID09PSAnJyAmJiAhaXNMaW5lLFxuICAgICAgICAgICAgYWNjZWxlcmF0b3I6ICdDbWRPckN0cmwrVicsXG4gICAgICAgICAgICB2aXNpYmxlOiAhaXNMaW5lLFxuICAgICAgICAgICAgY2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBHcmFwaEVkaXRvck1nci5JbnN0YW5jZS5wYXN0ZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6IEVkaXRvci5JMThuLnQoJ3NoYWRlci1ncmFwaC5yaWdodF9tZW51LmRlbGV0ZScpLFxuICAgICAgICAgICAgYWNjZWxlcmF0b3I6ICdEZWxldGUnLFxuICAgICAgICAgICAgZW5hYmxlZDogdXVpZCAhPT0gJycsXG4gICAgICAgICAgICBjbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIEdyYXBoRWRpdG9yTWdyLkluc3RhbmNlLmRlbGV0ZSggb3B0aW9ucyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogRWRpdG9yLkkxOG4udCgnc2hhZGVyLWdyYXBoLnJpZ2h0X21lbnUuY29weScpLFxuICAgICAgICAgICAgYWNjZWxlcmF0b3I6ICdDbWRPckN0cmwrQycsXG4gICAgICAgICAgICBlbmFibGVkOiB1dWlkICE9PSAnJyAmJiAhaXNMaW5lLFxuICAgICAgICAgICAgdmlzaWJsZTogIWlzTGluZSxcbiAgICAgICAgICAgIGNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgR3JhcGhFZGl0b3JNZ3IuSW5zdGFuY2UuY29weShvcHRpb25zKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiBFZGl0b3IuSTE4bi50KCdzaGFkZXItZ3JhcGgucmlnaHRfbWVudS5kdXBsaWNhdGUnKSxcbiAgICAgICAgICAgIGFjY2VsZXJhdG9yOiAnQ21kT3JDdHJsK0QnLFxuICAgICAgICAgICAgZW5hYmxlZDogdXVpZCAhPT0gJycgJiYgIWlzTGluZSxcbiAgICAgICAgICAgIHZpc2libGU6ICFpc0xpbmUsXG4gICAgICAgICAgICBjbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIEdyYXBoRWRpdG9yTWdyLkluc3RhbmNlLmR1cGxpY2F0ZShvcHRpb25zKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHsgdHlwZTogJ3NlcGFyYXRvcicgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6IEVkaXRvci5JMThuLnQoJ3NoYWRlci1ncmFwaC5yaWdodF9tZW51Lnpvb21fdG9fZml0JyksXG4gICAgICAgICAgICBlbmFibGVkOiB1dWlkID09PSAnJyxcbiAgICAgICAgICAgIHZpc2libGU6ICFpc0xpbmUsXG4gICAgICAgICAgICBjbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIEdyYXBoRWRpdG9yTWdyLkluc3RhbmNlLnpvb21Ub0ZpdCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6IEVkaXRvci5JMThuLnQoJ3NoYWRlci1ncmFwaC5yaWdodF9tZW51LnJlc2V0JyksXG4gICAgICAgICAgICBlbmFibGVkOiB1dWlkID09PSAnJyxcbiAgICAgICAgICAgIHZpc2libGU6ICFpc0xpbmUsXG4gICAgICAgICAgICBjbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIEdyYXBoRWRpdG9yTWdyLkluc3RhbmNlLnJlc2V0KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIF07XG59XG5cbiJdfQ==