"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.declareShaderNodeBlock = exports.registerDynamicEnum = exports.createPin = exports.createPinTag = exports.pinMap = exports.normalBlockCacheMap = void 0;
const block_forge_1 = require("../../block-forge");
const utils_1 = require("../utils");
exports.normalBlockCacheMap = new Map();
exports.pinMap = new Map();
function createPinTag(blockType, slotTag, slot) {
    return (0, utils_1.generatePinID)(slotTag, blockType, slot.type, slot.display);
}
exports.createPinTag = createPinTag;
function createPin(blockType, slotTag, slot, details) {
    const tag = createPinTag(blockType, slotTag, slot);
    const pinDescription = {
        tag: tag,
        dataType: slot.type,
        value: slot.default,
        name: slot.display,
        hidePin: slotTag === 'prop',
        details: {},
    };
    const pinData = {
        dataType: pinDescription.dataType,
        value: pinDescription.value,
        details: details || {},
    };
    if (slot.type === 'enum' && slot.enum) {
        // 注册枚举
        const type = slot.enum._name || `${blockType}_${slot.display}`;
        (0, block_forge_1.declareEnum)(type, slot.enum);
        pinData.value = slot.default;
        pinDescription.details.type = type;
    }
    else if (slot.type === 'dynamicEnum' && slot.registerEnum) {
        (0, block_forge_1.declareEnum)(slot.registerEnum.type, {});
        pinData.value = '';
        pinDescription.details.type = slot.registerEnum.type;
        pinDescription.details.defaultValue = slot.default;
    }
    if ('registerEnumType' in slot) {
        pinDescription.details.registerEnumType = slot.registerEnumType;
    }
    // 用于判断连线
    if ('connectType' in slot) {
        pinDescription.details.connectType = slot.connectType;
    }
    return {
        tag: tag,
        data: pinData,
        description: pinDescription,
    };
}
exports.createPin = createPin;
function createBlockByNodeDefine(nodeDefine) {
    const description = {
        type: nodeDefine.type,
        title: nodeDefine.details?.title || '',
        inputPins: [],
        outputPins: [],
        style: {
            headerColor: '#227F9B80',
        },
    };
    if (nodeDefine.details?.style !== undefined) {
        // 合并 style，已 dump 的 style 为主
        description.style = { ...description.style, ...nodeDefine.details?.style };
    }
    const blockData = {
        type: nodeDefine.type,
        position: { x: 0, y: 0 },
        details: {
            inputPins: [],
            outputPins: [],
        },
    };
    return {
        isMaster: nodeDefine.details?.master,
        details: nodeDefine.details,
        type: blockData.type,
        data: blockData,
        description: description,
    };
}
/**
 * 注册到动态枚举中，如果 value 重复就递增 1
 * 例如 test test_1
 * @param pinData
 * @param pinDesc
 */
function registerDynamicEnum(pinData, pinDesc) {
    let value = pinData.value;
    let index = 1;
    let done = false;
    while (!done) {
        done = (0, block_forge_1.declareDynamicEnumToType)({
            type: pinDesc.details.registerEnumType,
            name: value,
        });
        if (!done) {
            value = pinData.value + `_${index}`;
            index++;
        }
    }
    return value;
}
exports.registerDynamicEnum = registerDynamicEnum;
function createDynamicInputPins(blockDesc, details) {
    if (details.inputPinDescriptions) {
        return details.inputPinDescriptions.map((desc, index) => {
            const pinData = details.inputPins[index];
            if (desc.details.registerEnumType) {
                pinData.details.registerEnumType = desc.details.registerEnumType;
                pinData.value = registerDynamicEnum(pinData, desc);
            }
            return desc;
        });
    }
    else {
        return blockDesc.inputPins.map((desc, index) => {
            const newDesc = JSON.parse(JSON.stringify(desc));
            const pinData = details.inputPins[index];
            if (pinData) {
                if (newDesc.dataType === 'any') {
                    newDesc.dataType = pinData.dataType;
                    newDesc.value = pinData.value;
                }
                if (desc.details.registerEnumType) {
                    pinData.details.registerEnumType = desc.details.registerEnumType;
                    pinData.value = registerDynamicEnum(pinData, desc);
                }
            }
            return newDesc;
        });
    }
}
function createDynamicOutputPins(blockDesc, details) {
    if (details.outputPinDescriptions) {
        return details.outputPinDescriptions;
    }
    return blockDesc.outputPins.map((desc, index) => {
        const newDesc = JSON.parse(JSON.stringify(desc));
        const pinData = details.outputPins[index];
        if (pinData && newDesc.dataType === 'any') {
            newDesc.dataType = pinData.dataType;
            newDesc.value = pinData.value;
        }
        return newDesc;
    });
}
function declareShaderNodeBlock(shaderNodeMap) {
    // 清空缓存
    exports.normalBlockCacheMap.clear();
    exports.pinMap.clear();
    for (const [blockType, item] of shaderNodeMap) {
        const inputPins = [];
        const inputPinDescriptions = [];
        item.node.inputs?.forEach((slot) => {
            const pin = createPin(blockType, 'input', slot);
            inputPins.push(pin.data);
            inputPinDescriptions.push(pin.description);
            exports.pinMap.set(pin.tag, pin);
        });
        item.node.props?.forEach((slot) => {
            const pin = createPin(blockType, 'prop', slot);
            inputPins.push(pin.data);
            inputPinDescriptions.push(pin.description);
            exports.pinMap.set(pin.tag, pin);
        });
        const outputPins = [];
        const outputPinDescriptions = [];
        item.node.outputs?.forEach((slot) => {
            const pin = createPin(blockType, 'out', slot);
            outputPins.push(pin.data);
            outputPinDescriptions.push(pin.description);
            exports.pinMap.set(pin.tag, pin);
        });
        const block = createBlockByNodeDefine(item);
        block.data.details.inputPins = inputPins;
        block.data.details.outputPins = outputPins;
        block.description.inputPins = inputPinDescriptions;
        block.description.outputPins = outputPinDescriptions;
        block.description.createDynamicInputPins = createDynamicInputPins;
        block.description.createDynamicOutputPins = createDynamicOutputPins;
        exports.normalBlockCacheMap.set(block.type, block);
        // 注册
        (0, block_forge_1.declareBlock)(block.description);
    }
}
exports.declareShaderNodeBlock = declareShaderNodeBlock;
//# sourceMappingURL=data:application/json;base64,