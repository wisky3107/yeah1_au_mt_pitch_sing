"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultGraph = void 0;
const menu_1 = require("../menu");
const base_1 = require("../base");
function createDefaultGraph() {
    return {
        type: 'Graph',
        style: {
            showOriginPoint: true,
            originPointColor: 'rgba(68,68,68,0.3)',
            gridColor: 'rgba(68,68,68,0.3)',
            backgroundColor: '#050505',
        },
        validator: {
            dataLink(nodes, lines, line, input, output) {
                const inputBlock = base_1.ForgeMgr.Instance.getBlockByUuid(line.input.node);
                let inputConnectType = '', outputConnectType = '';
                const inputTag = input.name || input.tag;
                if (input.direction === 'input') {
                    const inputPinData = inputBlock.getInputPin(inputTag);
                    inputConnectType = inputPinData?.desc.details.connectType;
                }
                else if (input.direction === 'output') {
                    const inputPinData = inputBlock.getOutputPin(inputTag);
                    if (inputBlock.block.type === 'PropertyNode') {
                        inputConnectType = inputPinData?.value.details.connectType;
                    }
                    else {
                        inputConnectType = inputPinData?.desc.details.connectType;
                    }
                }
                const outputBlock = base_1.ForgeMgr.Instance.getBlockByUuid(line.output.node);
                const outputTag = output.name || output.tag;
                if (output.direction === 'input') {
                    const outputPinData = outputBlock.getInputPin(outputTag);
                    outputConnectType = outputPinData?.desc.details.connectType;
                }
                else if (output.direction === 'output') {
                    const outputPinData = outputBlock.getOutputPin(outputTag);
                    outputConnectType = outputPinData?.desc.details.connectType;
                }
                // 删除同一个 output 的线条
                base_1.GraphEditorMgr.Instance.deleteLinesByDuplicateOutput(lines, line);
                return (inputConnectType === outputConnectType) || (input.type === output.type);
            },
            execLink(nodes, lines, line, input, output) {
                return true;
            },
            deleteLine(...args) {
                return true;
            },
            // 节点
            createNode(...args) {
                return true;
            },
            deleteNode(...args) {
                return true;
            },
        },
        event: {
            // Block 选中事件
            onBlockSelected(event) {
                return true;
            },
            onBlockUnselected(event) {
                return true;
            },
            // Line 选中事件
            onLineSelected(event) {
                return true;
            },
            onLineUnselected(event) {
                return true;
            },
            // Block 点击事件
            onBlockClick(event) {
                return true;
            },
            onBlockRightClick(event) {
                return menu_1.Menu.Instance.popupMenu(event);
            },
            onBlockDblClick(event) {
                return true;
            },
            // Line 点击事件
            onLineClick(event) {
                return true;
            },
            onLineRightClick(event) {
                return menu_1.Menu.Instance.popupMenu(event);
            },
            onLineDblClick(event) {
                return true;
            },
            // Graph 点击事件
            onGraphRightClick(event) {
                return menu_1.Menu.Instance.popupMenu(event);
            },
            // 连线
            onLineCreated(event) {
                return true;
            },
            onLineDeleted(event) {
                return true;
            },
            // 节点
            onBlockCreated(event) {
                return true;
            },
            onBlockDeleted(event) {
                return true;
            },
        },
    };
}
exports.createDefaultGraph = createDefaultGraph;
//# sourceMappingURL=data:application/json;base64,