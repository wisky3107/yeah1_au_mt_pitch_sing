"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyBlockToMenu = exports.declareGraphBlock = exports.iteratePropertyDefines = exports.getBlockDataByType = exports.getPropertyDefineByType = exports.getBlockTemplateByType = exports.declareShaderNodeBlock = exports.declareShaderGraph = void 0;
const block_1 = require("./block");
Object.defineProperty(exports, "declareShaderNodeBlock", { enumerable: true, get: function () { return block_1.declareShaderNodeBlock; } });
const menu_1 = require("../menu");
const block_forge_1 = require("../../block-forge");
const graph_1 = require("./graph");
const base_1 = require("../base");
let shaderNodeMap = new Map();
let shaderPropertyMap = new Map();
function getPropertyDefineByType(type) {
    return shaderPropertyMap.get(type);
}
exports.getPropertyDefineByType = getPropertyDefineByType;
async function declareGraphBlock() {
    const { shaderNodeList, shaderPropertyList } = await base_1.MessageMgr.Instance.callSceneMethod('queryShaderNode');
    shaderNodeMap = new Map(shaderNodeList);
    shaderPropertyMap = new Map(shaderPropertyList);
    declareShaderGraph();
    (0, block_1.declareShaderNodeBlock)(shaderNodeMap);
    applyBlockToMenu();
    base_1.MessageMgr.Instance.send(base_1.MessageType.Declared);
}
exports.declareGraphBlock = declareGraphBlock;
function iteratePropertyDefines(handle) {
    shaderPropertyMap.forEach((define) => handle(define));
}
exports.iteratePropertyDefines = iteratePropertyDefines;
async function getBlockDataByType(type) {
    let block = getBlockTemplateByType(type);
    if (!block) {
        await declareGraphBlock();
    }
    block = getBlockTemplateByType(type);
    if (!block) {
        console.log(`create default shader graph failed, MasterNode: ${type}`);
        return;
    }
    return JSON.parse(JSON.stringify(block.data));
}
exports.getBlockDataByType = getBlockDataByType;
function declareShaderGraph() {
    const defaultGraph = (0, graph_1.createDefaultGraph)();
    if ((0, block_forge_1.hasDeclareGraph)(defaultGraph.type))
        return;
    (0, block_forge_1.declareGraph)(defaultGraph);
}
exports.declareShaderGraph = declareShaderGraph;
function applyBlockToMenu() {
    block_1.normalBlockCacheMap.forEach((block) => {
        if (block.details?.menu) {
            menu_1.Menu.Instance.addItemPath(block.details.menu, {
                type: block.data.type,
                details: {},
            });
        }
    });
}
exports.applyBlockToMenu = applyBlockToMenu;
function getBlockTemplateByType(type) {
    const blockTemplate = block_1.normalBlockCacheMap.get(type);
    if (blockTemplate) {
        return JSON.parse(JSON.stringify(blockTemplate));
    }
    console.debug(`get block templates not available by type: ${type}`);
}
exports.getBlockTemplateByType = getBlockTemplateByType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2hhZGVyLWdyYXBoL2RlY2xhcmUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsbUNBR2lCO0FBd0ViLHVHQXpFQSw4QkFBc0IsT0F5RUE7QUF2RTFCLGtDQUErQjtBQUMvQixtREFBa0U7QUFDbEUsbUNBQTZDO0FBQzdDLGtDQUFrRDtBQUlsRCxJQUFJLGFBQWEsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzlCLElBQUksaUJBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVsQyxTQUFTLHVCQUF1QixDQUFDLElBQVk7SUFDekMsT0FBTyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQTZERywwREFBdUI7QUEzRDNCLEtBQUssVUFBVSxpQkFBaUI7SUFDNUIsTUFBTSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxHQUFHLE1BQU0saUJBQVUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDNUcsYUFBYSxHQUFHLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3hDLGlCQUFpQixHQUFHLElBQUksR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFFaEQsa0JBQWtCLEVBQUUsQ0FBQztJQUNyQixJQUFBLDhCQUFzQixFQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3RDLGdCQUFnQixFQUFFLENBQUM7SUFFbkIsaUJBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGtCQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQW9ERyw4Q0FBaUI7QUFsRHJCLFNBQVMsc0JBQXNCLENBQUMsTUFBd0M7SUFDcEUsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBc0IsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDMUUsQ0FBQztBQStDRyx3REFBc0I7QUE3QzFCLEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxJQUFZO0lBQzFDLElBQUksS0FBSyxHQUFHLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDUixNQUFNLGlCQUFpQixFQUFFLENBQUM7S0FDN0I7SUFDRCxLQUFLLEdBQUcsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUMsbURBQW1ELElBQUksRUFBRSxDQUFDLENBQUM7UUFDdkUsT0FBTztLQUNWO0lBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQWlDRyxnREFBa0I7QUEvQnRCLFNBQVMsa0JBQWtCO0lBQ3ZCLE1BQU0sWUFBWSxHQUFHLElBQUEsMEJBQWtCLEdBQUUsQ0FBQztJQUMxQyxJQUFJLElBQUEsNkJBQWUsRUFBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBQUUsT0FBTztJQUUvQyxJQUFBLDBCQUFZLEVBQUMsWUFBWSxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQXNCRyxnREFBa0I7QUFwQnRCLFNBQVMsZ0JBQWdCO0lBQ3JCLDJCQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQXdCLEVBQUUsRUFBRTtRQUNyRCxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFO1lBQ3JCLFdBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO2dCQUMxQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJO2dCQUNyQixPQUFPLEVBQUUsRUFBRTthQUNkLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBa0JHLDRDQUFnQjtBQWhCcEIsU0FBUyxzQkFBc0IsQ0FBQyxJQUFZO0lBQ3hDLE1BQU0sYUFBYSxHQUFHLDJCQUFtQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwRCxJQUFJLGFBQWEsRUFBRTtRQUNmLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7S0FDcEQ7SUFDRCxPQUFPLENBQUMsS0FBSyxDQUFDLDhDQUE4QyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3hFLENBQUM7QUFLRyx3REFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEJsb2NrVGVtcGxhdGVEYXRhIH0gZnJvbSAnLi4vaW50ZXJuYWwnO1xuXG5pbXBvcnQge1xuICAgIG5vcm1hbEJsb2NrQ2FjaGVNYXAsXG4gICAgZGVjbGFyZVNoYWRlck5vZGVCbG9jayxcbn0gZnJvbSAnLi9ibG9jayc7XG5pbXBvcnQgeyBNZW51IH0gZnJvbSAnLi4vbWVudSc7XG5pbXBvcnQgeyBkZWNsYXJlR3JhcGgsIGhhc0RlY2xhcmVHcmFwaCB9IGZyb20gJy4uLy4uL2Jsb2NrLWZvcmdlJztcbmltcG9ydCB7IGNyZWF0ZURlZmF1bHRHcmFwaCB9IGZyb20gJy4vZ3JhcGgnO1xuaW1wb3J0IHsgTWVzc2FnZU1nciwgTWVzc2FnZVR5cGUgfSBmcm9tICcuLi9iYXNlJztcbmltcG9ydCB7IFByb3BlcnR5RGVmaW5lIH0gZnJvbSAnLi4vLi4vLi4vQHR5cGVzL3NoYWRlci1ub2RlLXR5cGUnO1xuaW1wb3J0IHsgQmxvY2tEYXRhIH0gZnJvbSAnLi4vLi4vYmxvY2stZm9yZ2UvaW50ZXJmYWNlJztcblxubGV0IHNoYWRlck5vZGVNYXAgPSBuZXcgTWFwKCk7XG5sZXQgc2hhZGVyUHJvcGVydHlNYXAgPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIGdldFByb3BlcnR5RGVmaW5lQnlUeXBlKHR5cGU6IHN0cmluZykge1xuICAgIHJldHVybiBzaGFkZXJQcm9wZXJ0eU1hcC5nZXQodHlwZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRlY2xhcmVHcmFwaEJsb2NrKCkge1xuICAgIGNvbnN0IHsgc2hhZGVyTm9kZUxpc3QsIHNoYWRlclByb3BlcnR5TGlzdCB9ID0gYXdhaXQgTWVzc2FnZU1nci5JbnN0YW5jZS5jYWxsU2NlbmVNZXRob2QoJ3F1ZXJ5U2hhZGVyTm9kZScpO1xuICAgIHNoYWRlck5vZGVNYXAgPSBuZXcgTWFwKHNoYWRlck5vZGVMaXN0KTtcbiAgICBzaGFkZXJQcm9wZXJ0eU1hcCA9IG5ldyBNYXAoc2hhZGVyUHJvcGVydHlMaXN0KTtcblxuICAgIGRlY2xhcmVTaGFkZXJHcmFwaCgpO1xuICAgIGRlY2xhcmVTaGFkZXJOb2RlQmxvY2soc2hhZGVyTm9kZU1hcCk7XG4gICAgYXBwbHlCbG9ja1RvTWVudSgpO1xuXG4gICAgTWVzc2FnZU1nci5JbnN0YW5jZS5zZW5kKE1lc3NhZ2VUeXBlLkRlY2xhcmVkKTtcbn1cblxuZnVuY3Rpb24gaXRlcmF0ZVByb3BlcnR5RGVmaW5lcyhoYW5kbGU6IChkZWZpbmU6IFByb3BlcnR5RGVmaW5lKSA9PiB2b2lkKSB7XG4gICAgc2hhZGVyUHJvcGVydHlNYXAuZm9yRWFjaCgoZGVmaW5lOiBQcm9wZXJ0eURlZmluZSkgPT4gaGFuZGxlKGRlZmluZSkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRCbG9ja0RhdGFCeVR5cGUodHlwZTogc3RyaW5nKTogUHJvbWlzZTxCbG9ja0RhdGEgfCB1bmRlZmluZWQ+IHtcbiAgICBsZXQgYmxvY2sgPSBnZXRCbG9ja1RlbXBsYXRlQnlUeXBlKHR5cGUpO1xuICAgIGlmICghYmxvY2spIHtcbiAgICAgICAgYXdhaXQgZGVjbGFyZUdyYXBoQmxvY2soKTtcbiAgICB9XG4gICAgYmxvY2sgPSBnZXRCbG9ja1RlbXBsYXRlQnlUeXBlKHR5cGUpO1xuICAgIGlmICghYmxvY2spIHtcbiAgICAgICAgY29uc29sZS5sb2coYGNyZWF0ZSBkZWZhdWx0IHNoYWRlciBncmFwaCBmYWlsZWQsIE1hc3Rlck5vZGU6ICR7dHlwZX1gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShibG9jay5kYXRhKSk7XG59XG5cbmZ1bmN0aW9uIGRlY2xhcmVTaGFkZXJHcmFwaCgpIHtcbiAgICBjb25zdCBkZWZhdWx0R3JhcGggPSBjcmVhdGVEZWZhdWx0R3JhcGgoKTtcbiAgICBpZiAoaGFzRGVjbGFyZUdyYXBoKGRlZmF1bHRHcmFwaC50eXBlKSkgcmV0dXJuO1xuXG4gICAgZGVjbGFyZUdyYXBoKGRlZmF1bHRHcmFwaCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5QmxvY2tUb01lbnUoKSB7XG4gICAgbm9ybWFsQmxvY2tDYWNoZU1hcC5mb3JFYWNoKChibG9jazogQmxvY2tUZW1wbGF0ZURhdGEpID0+IHtcbiAgICAgICAgaWYgKGJsb2NrLmRldGFpbHM/Lm1lbnUpIHtcbiAgICAgICAgICAgIE1lbnUuSW5zdGFuY2UuYWRkSXRlbVBhdGgoYmxvY2suZGV0YWlscy5tZW51LCB7XG4gICAgICAgICAgICAgICAgdHlwZTogYmxvY2suZGF0YS50eXBlLFxuICAgICAgICAgICAgICAgIGRldGFpbHM6IHt9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0QmxvY2tUZW1wbGF0ZUJ5VHlwZSh0eXBlOiBzdHJpbmcpOiBCbG9ja1RlbXBsYXRlRGF0YSB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgYmxvY2tUZW1wbGF0ZSA9IG5vcm1hbEJsb2NrQ2FjaGVNYXAuZ2V0KHR5cGUpO1xuICAgIGlmIChibG9ja1RlbXBsYXRlKSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGJsb2NrVGVtcGxhdGUpKTtcbiAgICB9XG4gICAgY29uc29sZS5kZWJ1ZyhgZ2V0IGJsb2NrIHRlbXBsYXRlcyBub3QgYXZhaWxhYmxlIGJ5IHR5cGU6ICR7dHlwZX1gKTtcbn1cblxuZXhwb3J0IHtcbiAgICBkZWNsYXJlU2hhZGVyR3JhcGgsXG4gICAgZGVjbGFyZVNoYWRlck5vZGVCbG9jayxcbiAgICBnZXRCbG9ja1RlbXBsYXRlQnlUeXBlLFxuICAgIGdldFByb3BlcnR5RGVmaW5lQnlUeXBlLFxuICAgIGdldEJsb2NrRGF0YUJ5VHlwZSxcbiAgICBpdGVyYXRlUHJvcGVydHlEZWZpbmVzLFxuICAgIGRlY2xhcmVHcmFwaEJsb2NrLFxuICAgIGFwcGx5QmxvY2tUb01lbnUsXG59O1xuIl19