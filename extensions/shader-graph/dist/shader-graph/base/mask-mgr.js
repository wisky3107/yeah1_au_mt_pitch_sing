"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaskMgr = void 0;
const tslib_1 = require("tslib");
const events_1 = tslib_1.__importDefault(require("events"));
const internal_1 = require("./internal");
const index_1 = require("./index");
class MaskMgr extends events_1.default {
    constructor() {
        super(...arguments);
        this.maskQueue = [];
        this.displayMaskType = internal_1.MaskType.WaitLoad;
    }
    get ready() {
        return this.displayMaskType === internal_1.MaskType.None;
    }
    static get Instance() {
        if (!this._instance) {
            this._instance = new MaskMgr();
        }
        return this._instance;
    }
    show(type) {
        if (!this.maskQueue.includes(type)) {
            this.maskQueue.push(type);
            this.maskQueue.sort((a, b) => {
                // 根据枚举值大小进行排序，从大到小
                return b - a;
            });
        }
        this.updateMask();
    }
    hide(type) {
        const jumpToNextMask = this.displayMaskType === type;
        const index = this.maskQueue.indexOf(type);
        if (index !== -1) {
            this.maskQueue.splice(index, 1);
        }
        if (jumpToNextMask) {
            this.updateMask();
        }
    }
    hideAll() {
        this.maskQueue = [];
        this.updateMask();
    }
    updateMask() {
        const nextMaskType = this.maskQueue.shift();
        this.displayMaskType = nextMaskType ?? internal_1.MaskType.None;
        index_1.MessageMgr.Instance.send(index_1.MessageType.UpdateMask, this.displayMaskType);
    }
}
exports.MaskMgr = MaskMgr;
MaskMgr._instance = null;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay1tZ3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2hhZGVyLWdyYXBoL2Jhc2UvbWFzay1tZ3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDREQUFrQztBQUNsQyx5Q0FBc0M7QUFDdEMsbUNBQWtEO0FBRWxELE1BQWEsT0FBUSxTQUFRLGdCQUFZO0lBQXpDOztRQUlJLGNBQVMsR0FBZSxFQUFFLENBQUM7UUFFM0Isb0JBQWUsR0FBYSxtQkFBUSxDQUFDLFFBQVEsQ0FBQztJQTZDbEQsQ0FBQztJQTNDRyxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxlQUFlLEtBQUssbUJBQVEsQ0FBQyxJQUFJLENBQUM7SUFDbEQsQ0FBQztJQUVNLE1BQU0sS0FBSyxRQUFRO1FBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztTQUNsQztRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxDQUFDLElBQWM7UUFDZixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLEVBQUUsQ0FBVyxFQUFFLEVBQUU7Z0JBQzdDLG1CQUFtQjtnQkFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLENBQUMsQ0FBQyxDQUFDO1NBQ047UUFDRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQUksQ0FBQyxJQUFjO1FBQ2YsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGVBQWUsS0FBSyxJQUFJLENBQUM7UUFDckQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDbkM7UUFDRCxJQUFJLGNBQWMsRUFBRTtZQUNoQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDckI7SUFDTCxDQUFDO0lBRUQsT0FBTztRQUNILElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsVUFBVTtRQUNOLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDNUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxZQUFZLElBQUksbUJBQVEsQ0FBQyxJQUFJLENBQUM7UUFDckQsa0JBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLG1CQUFXLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMzRSxDQUFDOztBQWxETCwwQkFtREM7QUFqRFUsaUJBQVMsR0FBbUIsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgTWFza1R5cGUgfSBmcm9tICcuL2ludGVybmFsJztcbmltcG9ydCB7IE1lc3NhZ2VNZ3IsIE1lc3NhZ2VUeXBlIH0gZnJvbSAnLi9pbmRleCc7XG5cbmV4cG9ydCBjbGFzcyBNYXNrTWdyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcblxuICAgIHN0YXRpYyBfaW5zdGFuY2U6IE1hc2tNZ3IgfCBudWxsID0gbnVsbDtcblxuICAgIG1hc2tRdWV1ZTogTWFza1R5cGVbXSA9IFtdO1xuXG4gICAgZGlzcGxheU1hc2tUeXBlOiBNYXNrVHlwZSA9IE1hc2tUeXBlLldhaXRMb2FkO1xuXG4gICAgZ2V0IHJlYWR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNwbGF5TWFza1R5cGUgPT09IE1hc2tUeXBlLk5vbmU7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgSW5zdGFuY2UoKTogTWFza01nciB7XG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IE1hc2tNZ3IoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XG4gICAgfVxuXG4gICAgc2hvdyh0eXBlOiBNYXNrVHlwZSkge1xuICAgICAgICBpZiAoIXRoaXMubWFza1F1ZXVlLmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2tRdWV1ZS5wdXNoKHR5cGUpO1xuICAgICAgICAgICAgdGhpcy5tYXNrUXVldWUuc29ydCgoYTogTWFza1R5cGUsIGI6IE1hc2tUeXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8g5qC55o2u5p6a5Li+5YC85aSn5bCP6L+b6KGM5o6S5bqP77yM5LuO5aSn5Yiw5bCPXG4gICAgICAgICAgICAgICAgcmV0dXJuIGIgLSBhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVNYXNrKCk7XG4gICAgfVxuXG4gICAgaGlkZSh0eXBlOiBNYXNrVHlwZSkge1xuICAgICAgICBjb25zdCBqdW1wVG9OZXh0TWFzayA9IHRoaXMuZGlzcGxheU1hc2tUeXBlID09PSB0eXBlO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMubWFza1F1ZXVlLmluZGV4T2YodHlwZSk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMubWFza1F1ZXVlLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGp1bXBUb05leHRNYXNrKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU1hc2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhpZGVBbGwoKSB7XG4gICAgICAgIHRoaXMubWFza1F1ZXVlID0gW107XG4gICAgICAgIHRoaXMudXBkYXRlTWFzaygpO1xuICAgIH1cblxuICAgIHVwZGF0ZU1hc2soKSB7XG4gICAgICAgIGNvbnN0IG5leHRNYXNrVHlwZSA9IHRoaXMubWFza1F1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIHRoaXMuZGlzcGxheU1hc2tUeXBlID0gbmV4dE1hc2tUeXBlID8/IE1hc2tUeXBlLk5vbmU7XG4gICAgICAgIE1lc3NhZ2VNZ3IuSW5zdGFuY2Uuc2VuZChNZXNzYWdlVHlwZS5VcGRhdGVNYXNrLCB0aGlzLmRpc3BsYXlNYXNrVHlwZSk7XG4gICAgfVxufVxuXG4iXX0=