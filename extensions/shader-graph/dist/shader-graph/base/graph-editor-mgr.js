"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphEditorMgr = void 0;
const declare_1 = require("../declare");
const block_forge_1 = require("../../block-forge");
const utils_1 = require("../utils");
const index_1 = require("./index");
/**
 * shader graph 的基础操作，增、删
 */
class GraphEditorMgr extends index_1.BaseMgr {
    constructor() {
        super(...arguments);
        this.clipboardData = [];
        this.lastMousePoint = { x: 0, y: 0 };
        this.shaderGraphPanel = null;
    }
    static get Instance() {
        if (!this._instance) {
            this._instance = new GraphEditorMgr();
        }
        return this._instance;
    }
    get mousePoint() {
        return this.lastMousePoint;
    }
    get mousePointInPanel() {
        return this.convertsMousePoint(this.lastMousePoint.x, this.lastMousePoint.y);
    }
    convertsMousePoint(x, y) {
        const rect = this.shaderGraphPanel.getBoundingClientRect();
        return {
            x: x - rect.x,
            y: y - rect.y,
        };
    }
    addMousePointerListener(shaderGraphPanel) {
        this.shaderGraphPanel = shaderGraphPanel;
        document.body.addEventListener('mousemove', (event) => {
            this.lastMousePoint = { x: event.clientX, y: event.clientY };
        });
    }
    /**
     * 剪切板是否为空
     */
    get clipboardIsNull() {
        return this.clipboardData.length === 0;
    }
    add(options) {
        options = JSON.parse(JSON.stringify(options));
        const blockTemplate = (0, declare_1.getBlockTemplateByType)(options.type);
        const data = blockTemplate && blockTemplate.data;
        if (!data)
            return;
        if (!options.details.outputPins || options.details.outputPins.length === 0) {
            options.details.outputPins = data.details.outputPins || [];
        }
        if (!options.details.inputPins || options.details.inputPins.length === 0) {
            options.details.inputPins = data.details.inputPins || [];
        }
        let position = { x: options.x || 0, y: options.y || 0 };
        if (options.x === undefined && options.y === undefined) {
            position = this.graphForge.convertCoordinate(this.mousePointInPanel);
        }
        else if (!options.dontConvertPos) {
            position = this.graphForge.convertCoordinate(position);
        }
        this.graphForge.addBlock({
            type: options.type,
            position: position,
            details: options.details,
        }, options.uuid);
        index_1.MessageMgr.Instance.send(index_1.MessageType.Dirty);
    }
    deleteLinesByDuplicateOutput(lines, line) {
        Object.keys(lines).forEach(key => {
            const otherLine = lines[key];
            if (otherLine.output.node === line.output.node &&
                otherLine.output.param === line.output.param) {
                this.graphForge.removeLine(key);
            }
        });
    }
    async delete(options = []) {
        const list = (0, utils_1.mergeGraphEditorOtherOptions)(options, this.getSelectedItems());
        this.graphForge?.startRecording();
        for (const item of list) {
            if (item.blockData) {
                const data = item.blockData;
                if (this.isMaster(data.type))
                    continue;
                await this.graphForge?.removeBlock(item.uuid);
                if (data.details.inputPins) {
                    await this.removeRegisterMenuByInputPins(data.details.inputPins);
                }
            }
        }
        for (const item of list) {
            if (item.lineData) {
                await this.graphForge?.removeLine(item.uuid);
            }
        }
        this.graphForge?.stopRecording();
        index_1.MessageMgr.Instance.send(index_1.MessageType.Dirty);
    }
    cut(options = []) {
        const list = (0, utils_1.mergeGraphEditorOtherOptions)(options, this.getSelectedItems());
        if (list.length > 0) {
            this.clipboardData = [];
            for (const item of list) {
                if (item.lineData)
                    continue;
                const data = item.blockData;
                if (!data)
                    continue;
                if (this.isMaster(data.type))
                    continue;
                this.graphForge.removeBlock(item.uuid);
                if (data.details.inputPins) {
                    this.removeRegisterMenuByInputPins(data.details.inputPins);
                }
                this.clipboardData.push(item);
            }
        }
    }
    copy(options = []) {
        const list = (0, utils_1.mergeGraphEditorOtherOptions)(options, this.getSelectedItems());
        if (list.length > 0) {
            this.clipboardData = [];
            for (const item of list) {
                if (item.lineData)
                    continue;
                const data = item.blockData;
                if (!data)
                    continue;
                if (this.isMaster(data.type))
                    continue;
                this.clipboardData.push(JSON.parse(JSON.stringify(item)));
            }
        }
    }
    paste() {
        const mousePoint = this.graphForge.convertCoordinate({
            x: this.mousePointInPanel.x,
            y: this.mousePointInPanel.y,
        });
        this.usePaste(mousePoint, this.clipboardData);
        index_1.MessageMgr.Instance.send(index_1.MessageType.Dirty);
    }
    undo() {
        this.graphForge?.undo();
    }
    redo() {
        this.graphForge?.redo();
    }
    usePaste(mousePoint, list) {
        const offsetPoint = (0, utils_1.getOffsetPointByMousePoint)(list, mousePoint);
        const blockIDMap = new Map();
        list.forEach((item) => {
            const newBlockID = (0, block_forge_1.generateUUID)();
            const data = JSON.parse(JSON.stringify(item.blockData));
            data.position.x += offsetPoint.x;
            data.position.y += offsetPoint.y;
            this.graphForge.addBlock(data, newBlockID);
            blockIDMap.set(item.uuid, newBlockID);
        });
        const blockMap = index_1.ForgeMgr.Instance.getBlockMap();
        // 为了用于去重
        const noDuplicatesArray = [];
        const newLines = [];
        list.forEach((item) => {
            const block = blockMap[item.uuid];
            block.getOutputPinsList().forEach((pin) => {
                pin.connectPins.forEach((connectPin) => {
                    // 如果拷贝输出的 block 没有包含在选中的 block 中就不需要添加 line
                    const outputNode = blockIDMap.get(connectPin.block.uuid);
                    if (!outputNode)
                        return;
                    const newLineInfo = {
                        type: 'curve',
                        input: {
                            node: blockIDMap.get(pin.block.uuid) || pin.block.uuid,
                            param: pin.desc.tag,
                        },
                        output: {
                            node: blockIDMap.get(connectPin.block.uuid) || connectPin.block.uuid,
                            param: connectPin.desc.tag,
                        },
                        details: {},
                    };
                    const tag = newLineInfo.input.node + newLineInfo.input.param +
                        newLineInfo.output.node + newLineInfo.output.param;
                    if (!noDuplicatesArray.includes(tag)) {
                        noDuplicatesArray.push(tag);
                        newLines.push(newLineInfo);
                    }
                });
            });
            block.getInputPinsList().forEach((pin) => {
                pin.connectPins.forEach((connectPin) => {
                    const newLineInfo = {
                        type: 'curve',
                        input: {
                            node: blockIDMap.get(connectPin.block.uuid) || connectPin.block.uuid,
                            param: connectPin.desc.tag,
                        },
                        output: {
                            node: blockIDMap.get(pin.block.uuid) || pin.block.uuid,
                            param: pin.desc.tag,
                        },
                        details: {},
                    };
                    const tag = newLineInfo.input.node + newLineInfo.input.param +
                        newLineInfo.output.node + newLineInfo.output.param;
                    if (!noDuplicatesArray.includes(tag)) {
                        noDuplicatesArray.push(tag);
                        newLines.push(newLineInfo);
                    }
                });
            });
        });
        // TODO 这里是 hack 如果不加 500 线条会无法添加
        setTimeout(() => {
            newLines.forEach((line) => {
                this.graphForge.addLine(line);
            });
        }, 500);
    }
    duplicate(options = []) {
        const list = (0, utils_1.mergeGraphEditorOtherOptions)(options, this.getSelectedItems()).filter((item) => item.blockData !== null);
        const mousePoint = this.graphForge.convertCoordinate({
            x: this.mousePointInPanel.x,
            y: this.mousePointInPanel.y,
        });
        this.usePaste(mousePoint, list);
        index_1.MessageMgr.Instance.send(index_1.MessageType.Dirty);
    }
    zoomToFit() {
        this.graphForge.zoomToFit();
    }
    /**
     * 重置，回原点
     */
    reset() {
        this.graphForge.setGraphInfo({
            scale: 1,
            offset: { x: 0, y: 0 },
        });
    }
    isMaster(type) {
        return (0, declare_1.getBlockTemplateByType)(type)?.isMaster || false;
    }
    /**
     * 获取当前选择的对象列表
     */
    getSelectedItems() {
        const list = [];
        this.graphForge.getSelectedLineList().forEach((item) => {
            list.push({
                uuid: item.id,
                lineData: item.target,
            });
        });
        this.graphForge.getSelectedBlockList().forEach((item) => {
            list.push({
                uuid: item.id,
                blockData: item.target,
            });
        });
        return list;
    }
    removeRegisterMenuByInputPins(inputPinDataList) {
        inputPinDataList.forEach((pin) => {
            if (pin.details.registerEnumType) {
                (0, block_forge_1.removeDynamicEnumToType)(pin.details.registerEnumType, pin.value);
            }
        });
    }
}
exports.GraphEditorMgr = GraphEditorMgr;
GraphEditorMgr._instance = null;
//# sourceMappingURL=data:application/json;base64,