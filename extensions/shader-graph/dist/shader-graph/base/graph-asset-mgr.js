"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphAssetMgr = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const internal_1 = require("./internal");
const global_exports_1 = require("../global-exports");
const utils_1 = require("../utils");
const index_1 = require("./index");
const declare_1 = require("../declare");
/**
 * 用于处理 shader-graph Asset 资源的存储
 */
class GraphAssetMgr {
    constructor() {
        this.assetUuid = '';
        this.assetData = '';
        this.shaderGraphAssetInfo = null;
    }
    static get Instance() {
        if (!this._instance) {
            this._instance = new GraphAssetMgr();
        }
        return this._instance;
    }
    get uuid() {
        return this.assetUuid || '';
    }
    async openAsset() {
        await index_1.GraphConfigMgr.Instance.load();
        const isReady = await index_1.MessageMgr.Instance.checkSceneReady();
        if (isReady) {
            index_1.MaskMgr.Instance.show(internal_1.MaskType.WaitLoad);
            await (0, declare_1.declareGraphBlock)();
            await this.load();
        }
        else {
            index_1.MessageMgr.Instance.setSceneReady(false);
            index_1.MaskMgr.Instance.show(internal_1.MaskType.WaitSceneReady);
        }
    }
    async load(uuid) {
        uuid = uuid || await Editor.Profile.getConfig(global_exports_1.PACKAGE_JSON.name, 'asset-uuid', 'local');
        if (!uuid) {
            index_1.MaskMgr.Instance.show(internal_1.MaskType.NeedCreateNewAsset);
            return false;
        }
        this.assetUuid = uuid;
        this.shaderGraphAssetInfo = await Editor.Message.request('asset-db', 'query-asset-info', uuid);
        if (!this.shaderGraphAssetInfo && index_1.GraphDataMgr.Instance.getGraphAssetData()) {
            index_1.MaskMgr.Instance.show(internal_1.MaskType.AssetMissing);
            return false;
        }
        if (this.shaderGraphAssetInfo) {
            this.assetData = (0, fs_extra_1.readFileSync)(this.shaderGraphAssetInfo.file, 'utf8');
            index_1.GraphDataMgr.Instance.setGraphDataByAsset(this.shaderGraphAssetInfo, this.assetData);
        }
        else {
            this.assetData = '';
        }
        if (!this.assetData) {
            index_1.MaskMgr.Instance.show(internal_1.MaskType.NeedCreateNewAsset);
            return false;
        }
        index_1.MaskMgr.Instance.hide(internal_1.MaskType.AssetMissing);
        index_1.MaskMgr.Instance.hide(internal_1.MaskType.NeedCreateNewAsset);
        index_1.MessageMgr.Instance.send(index_1.MessageType.AssetLoaded);
        return true;
    }
    /**
     * 打开指定 Shader Graph 资源
     */
    async open() {
        try {
            const result = await Editor.Dialog.select({
                title: Editor.I18n.t('shader-graph.messages.titles.open'),
                path: global_exports_1.PROJECT_PATH,
                type: 'file',
                multi: false,
                filters: [{ name: 'Shader Graph', extensions: ['shadergraph'] }],
            });
            const uuid = await (0, utils_1.getAssetUuidByPath)(result.filePaths[0]);
            await Editor.Profile.setConfig(global_exports_1.PACKAGE_JSON.name, 'asset-uuid', uuid, 'local');
            return await this.load(uuid);
        }
        catch (err) {
            console.error(err);
            return false;
        }
    }
    /**
     * 新建 Shader Graph 资源
     */
    async createNew(type) {
        try {
            const result = await Editor.Dialog.save({
                title: Editor.I18n.t('shader-graph.messages.save.title'),
                path: (0, path_1.join)(Editor.Project.path, 'assets', 'New Shader Graph'),
                filters: [{
                        name: 'New Shader Graph',
                        extensions: ['shadergraph'],
                    }],
            });
            const url = (0, utils_1.convertToProjectDbUrl)(result.filePath);
            const defaultShaderGraph = await index_1.GraphDataMgr.createDefaultShaderGraph(type);
            const asset = await this.createAsset(url, defaultShaderGraph);
            if (asset) {
                return await this.load(asset.uuid);
            }
            return false;
        }
        catch (err) {
            console.error(err);
            return false;
        }
    }
    /**
     * 保存
     */
    async save() {
        try {
            if (!this.shaderGraphAssetInfo)
                return false;
            index_1.GraphDataMgr.Instance.syncLastGraphData();
            console.time('save');
            Editor.Message.request('asset-db', 'save-asset', this.shaderGraphAssetInfo.uuid, index_1.GraphDataMgr.Instance.getGraphAssetData()).then(() => {
                console.timeEnd('save');
            });
            index_1.GraphDataMgr.Instance.setDirty(false);
            return true;
        }
        catch (e) {
            console.error(e);
            return false;
        }
    }
    /**
     * 另存为
     */
    async saveAs() {
        try {
            const result = await Editor.Dialog.save({
                title: Editor.I18n.t('shader-graph.messages.save.title'),
                path: (0, path_1.join)(Editor.Project.path, 'assets', this.shaderGraphAssetInfo?.name || global_exports_1.DEFAULT_NAME),
                filters: [{
                        name: 'Shader Graph',
                        extensions: ['shadergraph'],
                    }],
            });
            const url = (0, utils_1.convertToProjectDbUrl)(result.filePath);
            if (!url) {
                console.debug('另存 Shader Graph 资源失败, 保存的 url 为 null');
                return false;
            }
            const asset = await this.createAsset(url, index_1.GraphDataMgr.Instance.getGraphAssetData());
            if (asset) {
                return await this.load(asset.uuid);
            }
            return false;
        }
        catch (e) {
            console.error('保存失败!', e);
            return false;
        }
    }
    /**
     * 检查是否需要保存
     */
    async checkIfSave() {
        if (this.shaderGraphAssetInfo && !(0, fs_extra_1.existsSync)(this.shaderGraphAssetInfo.file)) {
            const result = await Editor.Dialog.warn(Editor.I18n.t('shader-graph.messages.missing_assets.detail'), {
                title: Editor.I18n.t('shader-graph.messages.titles.normal'),
                default: 0,
                cancel: 1,
                buttons: [
                    Editor.I18n.t('shader-graph.buttons.save'),
                    Editor.I18n.t('shader-graph.buttons.unsaved'),
                ],
            });
            if (0 === result.response) {
                // 另存为
                return await this.saveAs();
            }
            return false;
        }
        else {
            const result = await Editor.Dialog.warn(Editor.I18n.t('shader-graph.messages.save.detail'), {
                title: Editor.I18n.t('shader-graph.messages.titles.normal'),
                default: 0,
                cancel: 1,
                buttons: [
                    Editor.I18n.t('shader-graph.buttons.save'),
                    Editor.I18n.t('shader-graph.buttons.unsaved'),
                ],
            });
            if (0 === result.response) {
                // 另存为
                return await this.save();
            }
            return false;
        }
    }
    async createAsset(url, content) {
        try {
            if (!url || !content)
                return;
            // 强制覆盖
            return await Editor.Message.request('asset-db', 'create-asset', url, content, { overwrite: true });
        }
        catch (e) {
            console.error(e);
        }
    }
    assetAdd(uuid, info) {
        if (info && info.importer) {
            index_1.MessageMgr.Instance.callSceneMethod('registerEffects', [uuid]);
        }
    }
    async assetDelete(uuid, info) {
        if (info && info.importer) {
            index_1.MessageMgr.Instance.callSceneMethod('removeEffects', [uuid]);
        }
        if (this.uuid === uuid) {
            await index_1.GraphConfigMgr.Instance.delete(uuid);
            index_1.MaskMgr.Instance.show(internal_1.MaskType.AssetMissing);
        }
    }
    assetChange(uuid, info) {
        if (info && info.importer) {
            index_1.MessageMgr.Instance.callSceneMethod('updateEffect', [uuid]);
        }
        if (this.uuid === uuid && index_1.GraphDataMgr.Instance.graphForge && index_1.GraphDataMgr.Instance.graphData) {
            try {
                // 更新名字
                const newName = (0, utils_1.getName)(info.name);
                const needToRename = index_1.GraphDataMgr.Instance.graphForge.getCurrentGraph().name !== newName;
                const dirty = index_1.GraphDataMgr.Instance.getDirty();
                if (dirty && needToRename) {
                    index_1.MaskMgr.Instance.show(internal_1.MaskType.NeedSaveBeReloadByRename);
                    return;
                }
                if (dirty)
                    return;
                if (needToRename) {
                    this.load();
                    return;
                }
                // const baseData = readFileSync(info.file, 'utf8');
                // const conflictA = this.graphForge.serialize() !== baseData;
                // const conflictB = this.graphForge.serialize(this.graphData) !== baseData;
                //
                // if (conflictA && conflictB) {
                //     MaskMgr.Instance.show(MaskType.AssetChange);
                // }
            }
            catch (e) {
                console.error(e);
            }
        }
    }
}
exports.GraphAssetMgr = GraphAssetMgr;
GraphAssetMgr._instance = null;
//# sourceMappingURL=data:application/json;base64,