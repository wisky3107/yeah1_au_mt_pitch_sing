"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphConfigMgr = void 0;
const lodash_1 = require("lodash");
const global_exports_1 = require("../global-exports");
const base_mgr_1 = require("./base-mgr");
const float_window_1 = require("../../panels/shader-graph/components/float-window");
const CONFIG_KEY = 'shader-graph.graph-configs';
/**
 * 用于处理 shader-graph 配置存储
 */
class GraphConfigMgr extends base_mgr_1.BaseMgr {
    constructor() {
        super(...arguments);
        this.uuid = '';
        this.floatWindows = {};
        this.graphConfigs = {};
    }
    static get Instance() {
        if (!this._instance) {
            this._instance = new GraphConfigMgr();
        }
        return this._instance;
    }
    getFloatingWindowConfig(name, floatWindowConfig) {
        const { top, left, right, bottom, width, height } = this.floatWindows[name].style;
        const show = (this.floatWindows[name].getAttribute('hidden') === null);
        floatWindowConfig = floatWindowConfig || {};
        if (!floatWindowConfig.position) {
            floatWindowConfig.position = {};
        }
        if (left) {
            floatWindowConfig.position.left = left;
        }
        else {
            delete floatWindowConfig.position.left;
        }
        if (right) {
            floatWindowConfig.position.right = right;
        }
        else {
            delete floatWindowConfig.position.right;
        }
        if (top) {
            floatWindowConfig.position.top = top;
        }
        else {
            delete floatWindowConfig.position.top;
        }
        if (bottom) {
            floatWindowConfig.position.bottom = bottom;
        }
        else {
            delete floatWindowConfig.position.bottom;
        }
        if (Object.keys(floatWindowConfig.position).length === 0) {
            delete floatWindowConfig.position;
        }
        floatWindowConfig.show = show;
        floatWindowConfig.width = width;
        floatWindowConfig.height = height;
        return floatWindowConfig;
    }
    getConfig(uuid) {
        return this.graphConfigs[uuid || this.uuid] || { offset: { x: 0, y: 0 }, scale: 1, floatWindows: {} };
    }
    async load() {
        this.uuid = await Editor.Profile.getConfig(global_exports_1.PACKAGE_JSON.name, 'asset-uuid', 'local');
        this.graphConfigs = await Editor.Profile.getConfig(global_exports_1.PACKAGE_JSON.name, CONFIG_KEY, 'local') || {};
        console.debug('load config: ', this.uuid, this.graphConfigs);
    }
    async delete(uuid) {
        delete this.graphConfigs[uuid || this.uuid];
        await Editor.Profile.setConfig(global_exports_1.PACKAGE_JSON.name, CONFIG_KEY, this.graphConfigs, 'local');
    }
    async sync() {
        this.graphForge.setGraphInfo(await this.getConfig());
    }
    async autoSave(assetUuid) {
        const uuid = assetUuid || this.uuid;
        const graphConfig = this.getConfig(uuid);
        const graphInfo = this.graphForge.getGraphInfo();
        graphConfig.scale = graphInfo.scale;
        graphConfig.offset = graphInfo.offset;
        for (const name in this.floatWindows) {
            const config = (0, float_window_1.getFloatWindowConfigByName)(name);
            if (!config?.dontSave) {
                graphConfig.floatWindows[name] = this.getFloatingWindowConfig(name, graphConfig.floatWindows[name]);
            }
            if (graphConfig.floatWindows[name] && 0 === Object.keys(graphConfig.floatWindows[name]).length) {
                delete graphConfig.floatWindows[name];
            }
        }
        this.graphConfigs[uuid] = graphConfig;
        console.debug('Auto save config: ', uuid, this.graphConfigs);
        await Editor.Profile.setConfig(global_exports_1.PACKAGE_JSON.name, CONFIG_KEY, this.graphConfigs, 'local');
    }
    getFloatingWindowConfigByName(name) {
        return this.getConfig().floatWindows[name];
    }
    async saveDetails(name, details) {
        const graphConfig = this.getConfig();
        graphConfig.floatWindows[name] = (0, lodash_1.merge)({}, graphConfig.floatWindows[name], details);
        this.graphConfigs[this.uuid] = graphConfig;
        await Editor.Profile.setConfig(global_exports_1.PACKAGE_NAME, CONFIG_KEY, this.graphConfigs, 'local');
    }
    addFloatWindow(name, floatWindow) {
        this.floatWindows[name] = floatWindow;
    }
}
exports.GraphConfigMgr = GraphConfigMgr;
GraphConfigMgr._instance = null;
//# sourceMappingURL=data:application/json;base64,