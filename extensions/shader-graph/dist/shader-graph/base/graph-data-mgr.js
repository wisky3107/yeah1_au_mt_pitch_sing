"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphDataMgr = void 0;
const tslib_1 = require("tslib");
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
const lodash_1 = require("lodash");
const declare_1 = require("../declare");
const block_forge_1 = require("../../block-forge");
const index_1 = require("./index");
const utils_1 = require("../utils");
/**
 * 用于处理 shader-graph 数据
 */
class GraphDataMgr extends index_1.BaseMgr {
    constructor() {
        super(...arguments);
        /**
         * 表示是否设置 Graph
         * @private
         */
        this._dirty = false;
        this.graphData = null;
        /**
         * 存储面板一些主要配置
         * 例如缩放，偏移
         * @private
         */
        this.graphConfig = undefined;
    }
    static get Instance() {
        if (!this._instance) {
            this._instance = new GraphDataMgr();
        }
        return this._instance;
    }
    static async createDefaultShaderGraph(type = 'SurfaceMasterNode', graphType = 'Graph', graphName = 'New Shader Graph') {
        switch (type) {
            case 'Surface':
                type = 'SurfaceMasterNode';
                break;
            case 'Unlit':
                type = 'UnlitMasterNode';
                break;
        }
        const graphGraphData = {
            type: graphType,
            name: graphName,
            nodes: {},
            graphs: {},
            lines: {},
            details: {
                properties: [],
            },
        };
        const blockData = await (0, declare_1.getBlockDataByType)(type);
        if (!blockData) {
            console.log(`create default shader graph failed, MasterNode: ${type}`);
        }
        else {
            blockData.position = { x: 347, y: -280 };
            graphGraphData.nodes[(0, block_forge_1.generateUUID)()] = blockData;
        }
        return js_yaml_1.default.dump(graphGraphData);
    }
    setDirty(val, type) {
        this._dirty = val;
        index_1.MessageMgr.Instance.send(index_1.MessageType.DirtyChanged, val, type);
    }
    getDirty() {
        return this._dirty;
    }
    release() {
        if (this.onDirtyDebounce) {
            this.graphForge.removeEventListener('dirty', this.onDirtyDebounce);
            this.graphForge.removeEventListener('undo', this.onDirtyDebounce);
            this.graphForge.removeEventListener('redo', this.onDirtyDebounce);
            index_1.MessageMgr.Instance.register(index_1.MessageType.Dirty, this.onDirtyDebounce);
        }
        this.onEnterGraphBind && this.graphForge.removeEventListener('enter-graph', this.onEnterGraphBind);
        this.onAssetLoadedBind && index_1.MessageMgr.Instance.unregister(index_1.MessageType.AssetLoaded, this.onAssetLoadedBind);
    }
    setGraphForge(forge) {
        super.setGraphForge(forge);
        this.onDirtyDebounce = (0, lodash_1.debounce)(this.onDirty.bind(this), 100);
        forge.addEventListener('dirty', this.onDirtyDebounce);
        forge.addEventListener('undo', this.onDirtyDebounce);
        forge.addEventListener('redo', this.onDirtyDebounce);
        this.onEnterGraphBind = this.onEnterGraph.bind(this);
        forge.addEventListener('enter-graph', this.onEnterGraphBind);
        this.onAssetLoadedBind = this.onAssetLoaded.bind(this);
        index_1.MessageMgr.Instance.register(index_1.MessageType.AssetLoaded, this.onAssetLoadedBind);
        index_1.MessageMgr.Instance.register(index_1.MessageType.Dirty, this.onDirtyDebounce);
    }
    reset() {
        this.setDirty(false);
    }
    onAssetLoaded() {
        this.reset();
        this.reload();
    }
    onDirty(event) {
        if (!this.graphForge)
            return;
        index_1.GraphConfigMgr.Instance.autoSave().then(() => { });
        const customEvent = event;
        this.setDirty(true, customEvent && customEvent.detail?.dirtyType);
    }
    onEnterGraph() {
        if (!this.graphForge)
            return;
        this.graphData = this.graphForge.getCurrentGraph();
        index_1.MessageMgr.Instance.send(index_1.MessageType.EnterGraph);
    }
    async restore() {
        if (this.lastGraphData) {
            this.setGraphDataToForge(this.lastGraphData);
        }
        this.graphData = this.graphForge.getCurrentGraph();
        this.lastGraphData = JSON.parse(JSON.stringify(this.graphData));
        this.setDirty(false);
        index_1.MessageMgr.Instance.send(index_1.MessageType.Restore);
    }
    setGraphDataByAsset(assetInfo, asset) {
        if (!this.graphForge)
            return;
        if (asset) {
            this.graphData = this.validateGraphData(assetInfo, this.graphForge.deserialize(asset));
        }
        else {
            console.warn('reload failed, graph data asset is null.');
            return;
        }
    }
    async reload() {
        if (!this.graphForge || !this.graphData)
            return;
        this.lastGraphData = JSON.parse(JSON.stringify(this.graphData));
        this.setGraphDataToForge(this.graphData);
        await index_1.GraphConfigMgr.Instance.sync();
        index_1.MaskMgr.Instance.hideAll();
        index_1.MessageMgr.Instance.send(index_1.MessageType.SetGraphDataToForge);
    }
    syncLastGraphData() {
        this.lastGraphData = JSON.parse(JSON.stringify(this.graphData));
    }
    /**
     * 存储到 Asset 的字符串数据
     */
    getGraphAssetData() {
        if (!this.graphForge)
            return '';
        return this.graphForge.serialize();
    }
    /**
     * 还原成原始节点
     * @private
     */
    reduceToBaseNode(property) {
        const graphData = this.getCurrentGraphData();
        for (const nodeID in graphData.nodes) {
            const node = graphData.nodes[nodeID];
            const details = node && node.details;
            if (!details)
                continue;
            if (details && details.propertyID === property.id) {
                details.title = property.name;
                details.outputPins = property.outputPins;
                // 重置
                const block = (0, declare_1.getBlockTemplateByType)(details.baseType);
                node.type = details.baseType;
                const inputPins = [];
                block?.data.details.inputPins?.forEach((pin, index) => {
                    const rawPinData = details.inputPins?.[index];
                    if (rawPinData) {
                        pin.value = rawPinData.value;
                    }
                    inputPins.push(pin);
                });
                node.details.inputPins = inputPins;
                const outputPins = [];
                block?.data.details.outputPins?.forEach((pin, index) => {
                    const rawPinData = details.outputPins?.[index];
                    if (rawPinData) {
                        pin.value = rawPinData.value;
                    }
                    outputPins.push(pin);
                });
                node.details.outputPins = outputPins;
            }
        }
        this.setGraphDataToForge(graphData);
    }
    /**
     * 验证数据
     * @private
     */
    validateGraphData(assetInfo, graphData) {
        let dirty = false;
        const newName = (0, utils_1.getName)(assetInfo.path);
        if (graphData.name !== newName) {
            graphData.name = newName;
            dirty = true;
        }
        for (const uuid in graphData.nodes) {
            const block = graphData.nodes[uuid];
            const blockTemplate = (0, declare_1.getBlockTemplateByType)(block.type);
            if (blockTemplate) {
                // 1.新增 slot 需要补全数据
                const inputPins = block.details.inputPins;
                if (inputPins && blockTemplate.data.details.inputPins) {
                    blockTemplate.data.details.inputPins.forEach((pin, index) => {
                        const inputPinData = inputPins[index];
                        if (!inputPinData) {
                            inputPins[index] = pin;
                            dirty = true;
                        }
                    });
                }
            }
        }
        // 初始化
        if (!graphData.details.properties) {
            graphData.details.properties = [];
        }
        if (dirty && this.graphForge) {
            Editor.Message.request('asset-db', 'save-asset', assetInfo.uuid, this.graphForge.serialize(graphData));
        }
        return graphData;
    }
}
exports.GraphDataMgr = GraphDataMgr;
GraphDataMgr._instance = null;
//# sourceMappingURL=data:application/json;base64,