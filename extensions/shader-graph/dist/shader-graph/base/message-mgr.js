"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageMgr = void 0;
/**
 * 这里统一处理消息的发送，普通的，场景的，DB 的
 */
const internal_1 = require("./internal");
class MessageMgr {
    constructor() {
        this.eventCallbacks = new Map();
        // --- Scene ---
        this.isSceneReady = undefined;
        this.sceneMessages = [];
    }
    static get Instance() {
        if (!this._instance) {
            this._instance = new MessageMgr();
        }
        return this._instance;
    }
    send(eventNames, ...args) {
        // 模拟发送消息的操作
        const events = Array.isArray(eventNames) ? eventNames : [eventNames];
        for (const eventName of events) {
            console.debug(`发送消息 (${eventName}) ${args.length > 0 ? ':' + JSON.stringify(args) : ''}`);
            // 触发特定事件的注册的回调函数来处理消息
            const callbacks = this.eventCallbacks.get(eventName);
            if (callbacks) {
                callbacks.forEach((callback) => {
                    callback(...args);
                });
            }
        }
    }
    unregisterAll() {
        this.eventCallbacks.clear();
        this.sceneMessages = [];
    }
    /**
     * 注册一个或多个事件的消息回调函数
     * @param eventNames
     * @param callback
     */
    register(eventNames, callback) {
        const events = Array.isArray(eventNames) ? eventNames : [eventNames];
        for (const eventName of events) {
            if (!this.eventCallbacks.has(eventName)) {
                this.eventCallbacks.set(eventName, []);
            }
            this.eventCallbacks.get(eventName)?.push(callback);
        }
    }
    /**
     * 取消注册一个或多个事件的消息回调函数
     * @param eventNames
     * @param callback
     */
    unregister(eventNames, callback) {
        const events = Array.isArray(eventNames) ? eventNames : [eventNames];
        for (const eventName of events) {
            const callbacks = this.eventCallbacks.get(eventName);
            if (callbacks) {
                const index = callbacks.indexOf(callback);
                if (index !== -1) {
                    callbacks.splice(index, 1);
                }
            }
        }
    }
    async checkSceneReady() {
        if (!this.isSceneReady) {
            this.isSceneReady = await Editor.Message.request('scene', 'query-is-ready');
        }
        return this.isSceneReady;
    }
    setSceneReady(ready) {
        this.isSceneReady = ready;
        for (let i = 0; i < this.sceneMessages.length; i++) {
            const options = this.sceneMessages[i];
            Editor.Message.request('scene', 'execute-scene-script', {
                name: 'shader-graph',
                method: options.method,
                args: options.args,
            }).then((response) => {
                options.callback(null, response);
            });
        }
        if (ready) {
            MessageMgr.Instance.send(internal_1.MessageType.SceneReady);
        }
    }
    async callSceneMethod(method, args) {
        return new Promise((resolve, reject) => {
            const callback = function (error, data) {
                if (error) {
                    reject(error);
                    return;
                }
                resolve(data);
            };
            this.checkSceneReady().then(() => {
                if (!this.isSceneReady) {
                    return this.sceneMessages.push({
                        method,
                        args: args || [],
                        callback,
                    });
                }
                Editor.Message.request('scene', 'execute-scene-script', {
                    name: 'shader-graph',
                    method,
                    args: args || [],
                }).then((response) => {
                    callback(null, response);
                });
            });
        });
    }
}
exports.MessageMgr = MessageMgr;
MessageMgr._instance = null;
//# sourceMappingURL=data:application/json;base64,