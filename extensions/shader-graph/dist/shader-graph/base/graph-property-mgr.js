"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphPropertyMgr = void 0;
const interface_1 = require("../interface");
const index_1 = require("./index");
const declare_1 = require("../declare");
/**
 * 用于处理 Property
 */
class GraphPropertyMgr {
    static get Instance() {
        if (!this._instance) {
            this._instance = new GraphPropertyMgr();
        }
        return this._instance;
    }
    getPropertyByID(id) {
        const currentGraphData = index_1.GraphDataMgr.Instance.getCurrentGraphData();
        return currentGraphData.details.properties.find((property) => property.id === id);
    }
    updateProperty(id, newPropertyData) {
        const currentGraphData = index_1.GraphDataMgr.Instance.getCurrentGraphData();
        currentGraphData.details.properties = currentGraphData.details.properties.map((item) => {
            if (item.id === id) {
                return newPropertyData;
            }
            return item;
        });
        this.updatePropertyToGraphNode(newPropertyData);
        index_1.GraphDataMgr.Instance.setDirty(true);
    }
    updatePropertyValue(id, value) {
        const currentGraphData = index_1.GraphDataMgr.Instance.getCurrentGraphData();
        if (!currentGraphData)
            return;
        currentGraphData.details.properties = currentGraphData.details.properties.map((item) => {
            if (item.id === id) {
                item = value;
            }
            return item;
        });
        this.updatePropertyToGraphNode(value);
        index_1.GraphDataMgr.Instance.setDirty(true);
    }
    async iterateProperties(handle) {
        const currentGraphData = index_1.GraphDataMgr.Instance.getCurrentGraphData();
        if (!currentGraphData)
            return;
        for (const property of currentGraphData.details.properties) {
            await handle(property, (0, declare_1.getPropertyDefineByType)(property.type));
        }
    }
    exitsProperty(name) {
        const currentGraphData = index_1.GraphDataMgr.Instance.getCurrentGraphData();
        for (const property of currentGraphData.details.properties) {
            if (property.name === name) {
                return true;
            }
        }
        return false;
    }
    createProperty(type, name) {
        let propertyDefine;
        if (typeof type === 'string') {
            propertyDefine = (0, declare_1.getPropertyDefineByType)(type);
        }
        else {
            propertyDefine = type;
        }
        const propertyData = new interface_1.PropertyData();
        propertyData.name = name;
        propertyData.type = propertyDefine?.type;
        propertyData.declareType = propertyDefine?.declareType;
        propertyData.outputPins = [];
        propertyDefine?.outputs.forEach((slot, index) => {
            propertyData.outputPins.push({
                dataType: slot.type,
                value: slot.default,
                details: {
                    connectType: slot.connectType,
                },
            });
        });
        return propertyData;
    }
    addProperty(propertyDefine) {
        const currentGraphData = index_1.GraphDataMgr.Instance.getCurrentGraphData();
        // name 是唯一标识，如果存在 name 就重命名
        const existingNames = new Set(currentGraphData.details.properties.map((item) => item.name));
        let newName = propertyDefine.name;
        let counter = 1;
        while (existingNames.has(newName)) {
            newName = `${propertyDefine.name}_${counter}`;
            counter++;
        }
        const propertyData = this.createProperty(propertyDefine, newName);
        const properties = currentGraphData.details.properties;
        if (properties) {
            currentGraphData.details.properties.push(propertyData);
            index_1.GraphDataMgr.Instance.setDirty(true);
        }
        return propertyData;
    }
    removeProperty(index) {
        const currentGraphData = index_1.GraphDataMgr.Instance.getCurrentGraphData();
        const property = currentGraphData.details.properties.splice(index, 1)[0];
        index_1.GraphDataMgr.Instance.reduceToBaseNode(property);
        const rootGraphData = index_1.GraphDataMgr.Instance.getRootGraphData();
        this.removePropertyPinInSubGraphNode(rootGraphData, property.id);
        for (const graphID in rootGraphData.graphs) {
            this.removePropertyPinInSubGraphNode(rootGraphData.graphs[graphID], property.id);
        }
        index_1.GraphDataMgr.Instance.setDirty(true);
        return property;
    }
    removePropertyPinInSubGraphNode(graphData, propertyID) {
        for (const nodeID in graphData.nodes) {
            const node = graphData.nodes[nodeID];
            if (node.type === 'SubGraphNode') {
                const index = node.details.inputPins?.findIndex((pin) => pin.details.propertyID === propertyID);
                if (index !== -1 && index !== undefined) {
                    node.details.inputPins?.splice(index, 1);
                    node.details.inputDescription?.splice(index, 1);
                }
            }
        }
    }
    /**
     * 更新 PropertyNode 数据（title、output）
     * @param property
     * @private
     */
    updatePropertyToGraphNode(property) {
        if (!index_1.GraphDataMgr.Instance.graphData) {
            console.debug('updatePropertyToGraphNode failed, the graph data is null');
            return;
        }
        for (const nodeID in index_1.GraphDataMgr.Instance.graphData.nodes) {
            const node = index_1.GraphDataMgr.Instance.graphData.nodes[nodeID];
            const details = node && node.details;
            if (details && details.propertyID === property.id) {
                details.title = property.name;
                details.outputPins = property.outputPins;
            }
        }
        index_1.GraphDataMgr.Instance.reload();
    }
}
exports.GraphPropertyMgr = GraphPropertyMgr;
GraphPropertyMgr._instance = null;
//# sourceMappingURL=data:application/json;base64,