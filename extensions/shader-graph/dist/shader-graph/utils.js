"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getName = exports.mergeGraphEditorOtherOptions = exports.getOffsetPointByMousePoint = exports.getAssetUuidByPath = exports.convertToProjectDbUrl = exports.generatePinID = exports.contains = exports.generateUUID = void 0;
const path_1 = require("path");
const global_exports_1 = require("./global-exports");
function generateUUID() {
    return 'p_' + Date.now() + (Math.random() + '').substring(10);
}
exports.generateUUID = generateUUID;
/**
 * 是否坐标包含在里面
 * @param point
 * @param bounds
 */
function contains(point, bounds) {
    return point.x >= bounds.x && point.x <= bounds.x + bounds.width && point.y >= bounds.y && point.y <= bounds.y + bounds.height;
}
exports.contains = contains;
function generatePinID(tag, blockType, slotType, slotDisplayName) {
    return `${tag}_${blockType}_${slotType}_${slotDisplayName}`;
}
exports.generatePinID = generatePinID;
/**
 * 转成在项目 assets 目录下
 * @param path
 */
function convertToProjectDbUrl(path) {
    if (!path)
        return '';
    return `db://assets/${(0, path_1.relative)(global_exports_1.PROJECT_PATH, path)}`;
}
exports.convertToProjectDbUrl = convertToProjectDbUrl;
async function getAssetUuidByPath(path) {
    if (!path)
        return '';
    const url = convertToProjectDbUrl(path);
    const uuid = await Editor.Message.request('asset-db', 'query-uuid', url);
    if (!uuid) {
        console.error(`loadByUrl failed, can't get uuid by ${url}`);
        return '';
    }
    return uuid;
}
exports.getAssetUuidByPath = getAssetUuidByPath;
function getOffsetPointByMousePoint(list, mousePoint) {
    let sumX = 0;
    let sumY = 0;
    list.forEach((item) => {
        if (item.blockData) {
            sumX += item.blockData.position.x;
            sumY += item.blockData.position.y;
        }
    });
    return {
        x: mousePoint.x - sumX / list.length,
        y: mousePoint.y - sumY / list.length,
    };
}
exports.getOffsetPointByMousePoint = getOffsetPointByMousePoint;
function mergeGraphEditorOtherOptions(arr1, arr2) {
    const mergedSet = new Set();
    const array = [];
    for (const obj of arr1) {
        mergedSet.add(obj.uuid);
        array.push(obj);
    }
    for (const obj of arr2) {
        if (!mergedSet.has(obj.uuid)) {
            mergedSet.add(obj.uuid);
            array.push(obj);
        }
    }
    return array;
}
exports.mergeGraphEditorOtherOptions = mergeGraphEditorOtherOptions;
function getName(path) {
    return (0, path_1.basename)(path, (0, path_1.extname)(path));
}
exports.getName = getName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2hhZGVyLWdyYXBoL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLCtCQUFtRDtBQUVuRCxxREFBZ0Q7QUFHaEQsU0FBZ0IsWUFBWTtJQUN4QixPQUFPLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xFLENBQUM7QUFGRCxvQ0FFQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixRQUFRLENBQUMsS0FBK0IsRUFBRSxNQUErRDtJQUNySCxPQUFPLEtBQUssQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDbkksQ0FBQztBQUZELDRCQUVDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLEdBQVcsRUFBRSxTQUFpQixFQUFFLFFBQWdCLEVBQUUsZUFBdUI7SUFDbkcsT0FBTyxHQUFHLEdBQUcsSUFBSSxTQUFTLElBQUksUUFBUSxJQUFJLGVBQWUsRUFBRSxDQUFDO0FBQ2hFLENBQUM7QUFGRCxzQ0FFQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLHFCQUFxQixDQUFDLElBQXlCO0lBQzNELElBQUksQ0FBQyxJQUFJO1FBQUUsT0FBTyxFQUFFLENBQUM7SUFFckIsT0FBTyxlQUFlLElBQUEsZUFBUSxFQUFDLDZCQUFZLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUN6RCxDQUFDO0FBSkQsc0RBSUM7QUFFTSxLQUFLLFVBQVUsa0JBQWtCLENBQUMsSUFBeUI7SUFDOUQsSUFBSSxDQUFDLElBQUk7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUVyQixNQUFNLEdBQUcsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxNQUFNLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDekUsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNQLE9BQU8sQ0FBQyxLQUFLLENBQUMsdUNBQXVDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDNUQsT0FBTyxFQUFFLENBQUM7S0FDYjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFWRCxnREFVQztBQUVELFNBQWdCLDBCQUEwQixDQUFDLElBQStCLEVBQUUsVUFBb0M7SUFDNUcsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQTZCLEVBQUUsRUFBRTtRQUMzQyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNsQyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ3JDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPO1FBQ0gsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNO1FBQ3BDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTTtLQUN2QyxDQUFDO0FBQ04sQ0FBQztBQWRELGdFQWNDO0FBRUQsU0FBZ0IsNEJBQTRCLENBQUMsSUFBK0IsRUFBRSxJQUErQjtJQUN6RyxNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO0lBQ3BDLE1BQU0sS0FBSyxHQUE4QixFQUFFLENBQUM7SUFFNUMsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDcEIsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNuQjtJQUVELEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO1FBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMxQixTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ25CO0tBQ0o7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBakJELG9FQWlCQztBQUVELFNBQWdCLE9BQU8sQ0FBQyxJQUFZO0lBQ2hDLE9BQU8sSUFBQSxlQUFRLEVBQUMsSUFBSSxFQUFFLElBQUEsY0FBTyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUZELDBCQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmFzZW5hbWUsIGV4dG5hbWUsIHJlbGF0aXZlIH0gZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IFBST0pFQ1RfUEFUSCB9IGZyb20gJy4vZ2xvYmFsLWV4cG9ydHMnO1xuaW1wb3J0IHR5cGUgeyBHcmFwaEVkaXRvck90aGVyT3B0aW9ucyB9IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVVVSUQoKSB7XG4gICAgcmV0dXJuICdwXycgKyBEYXRlLm5vdygpICsgKE1hdGgucmFuZG9tKCkgKyAnJykuc3Vic3RyaW5nKDEwKTtcbn1cblxuLyoqXG4gKiDmmK/lkKblnZDmoIfljIXlkKvlnKjph4zpnaJcbiAqIEBwYXJhbSBwb2ludFxuICogQHBhcmFtIGJvdW5kc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnMocG9pbnQ6IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfSwgYm91bmRzOiB7IHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHBvaW50LnggPj0gYm91bmRzLnggJiYgcG9pbnQueCA8PSBib3VuZHMueCArIGJvdW5kcy53aWR0aCAmJiBwb2ludC55ID49IGJvdW5kcy55ICYmIHBvaW50LnkgPD0gYm91bmRzLnkgKyBib3VuZHMuaGVpZ2h0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVQaW5JRCh0YWc6IHN0cmluZywgYmxvY2tUeXBlOiBzdHJpbmcsIHNsb3RUeXBlOiBzdHJpbmcsIHNsb3REaXNwbGF5TmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGAke3RhZ31fJHtibG9ja1R5cGV9XyR7c2xvdFR5cGV9XyR7c2xvdERpc3BsYXlOYW1lfWA7XG59XG5cbi8qKlxuICog6L2s5oiQ5Zyo6aG555uuIGFzc2V0cyDnm67lvZXkuItcbiAqIEBwYXJhbSBwYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9Qcm9qZWN0RGJVcmwocGF0aD86IHN0cmluZyB8IHVuZGVmaW5lZCk6IHN0cmluZyB7XG4gICAgaWYgKCFwYXRoKSByZXR1cm4gJyc7XG5cbiAgICByZXR1cm4gYGRiOi8vYXNzZXRzLyR7cmVsYXRpdmUoUFJPSkVDVF9QQVRILCBwYXRoKX1gO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QXNzZXRVdWlkQnlQYXRoKHBhdGg/OiBzdHJpbmcgfCB1bmRlZmluZWQpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmICghcGF0aCkgcmV0dXJuICcnO1xuXG4gICAgY29uc3QgdXJsID0gY29udmVydFRvUHJvamVjdERiVXJsKHBhdGgpO1xuICAgIGNvbnN0IHV1aWQgPSBhd2FpdCBFZGl0b3IuTWVzc2FnZS5yZXF1ZXN0KCdhc3NldC1kYicsICdxdWVyeS11dWlkJywgdXJsKTtcbiAgICBpZiAoIXV1aWQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgbG9hZEJ5VXJsIGZhaWxlZCwgY2FuJ3QgZ2V0IHV1aWQgYnkgJHt1cmx9YCk7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPZmZzZXRQb2ludEJ5TW91c2VQb2ludChsaXN0OiBHcmFwaEVkaXRvck90aGVyT3B0aW9uc1tdLCBtb3VzZVBvaW50OiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH0pIHtcbiAgICBsZXQgc3VtWCA9IDA7XG4gICAgbGV0IHN1bVkgPSAwO1xuICAgIGxpc3QuZm9yRWFjaCgoaXRlbTogR3JhcGhFZGl0b3JPdGhlck9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKGl0ZW0uYmxvY2tEYXRhKSB7XG4gICAgICAgICAgICBzdW1YICs9IGl0ZW0uYmxvY2tEYXRhLnBvc2l0aW9uLng7XG4gICAgICAgICAgICBzdW1ZICs9IGl0ZW0uYmxvY2tEYXRhLnBvc2l0aW9uLnk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IG1vdXNlUG9pbnQueCAtIHN1bVggLyBsaXN0Lmxlbmd0aCxcbiAgICAgICAgeTogbW91c2VQb2ludC55IC0gc3VtWSAvIGxpc3QubGVuZ3RoLFxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUdyYXBoRWRpdG9yT3RoZXJPcHRpb25zKGFycjE6IEdyYXBoRWRpdG9yT3RoZXJPcHRpb25zW10sIGFycjI6IEdyYXBoRWRpdG9yT3RoZXJPcHRpb25zW10pOiBHcmFwaEVkaXRvck90aGVyT3B0aW9uc1tdIHtcbiAgICBjb25zdCBtZXJnZWRTZXQgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICBjb25zdCBhcnJheTogR3JhcGhFZGl0b3JPdGhlck9wdGlvbnNbXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBvYmogb2YgYXJyMSkge1xuICAgICAgICBtZXJnZWRTZXQuYWRkKG9iai51dWlkKTtcbiAgICAgICAgYXJyYXkucHVzaChvYmopO1xuICAgIH1cblxuICAgIGZvciAoY29uc3Qgb2JqIG9mIGFycjIpIHtcbiAgICAgICAgaWYgKCFtZXJnZWRTZXQuaGFzKG9iai51dWlkKSkge1xuICAgICAgICAgICAgbWVyZ2VkU2V0LmFkZChvYmoudXVpZCk7XG4gICAgICAgICAgICBhcnJheS5wdXNoKG9iaik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGJhc2VuYW1lKHBhdGgsIGV4dG5hbWUocGF0aCkpO1xufVxuIl19