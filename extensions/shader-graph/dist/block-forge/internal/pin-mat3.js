'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const pin_1 = require("../pin");
const mat3KeyList = [
    'm00', 'm01', 'm02',
    'm03', 'm04', 'm05',
    'm06', 'm07', 'm08',
];
class Mat3PinAction extends pin_1.PinAction {
    exec(params) {
        const $pin = params.forge.getPinElement(this.detail.blockName, 'input', this.detail.index);
        if ($pin) {
            // @ts-ignore
            const pin = $pin.__pin;
            pin.details.value[this.detail.key] = this.detail.target;
            pin.onUpdate();
        }
    }
    revertAction() {
        return new Mat3PinAction(this.pin, {
            key: this.detail.key,
            source: this.detail.target,
            target: this.detail.source,
        });
    }
}
class Mat3Pin extends pin_1.Pin {
    constructor() {
        super(...arguments);
        this.color = '#c56c37';
        this.line = 'normal';
        this.details = {
            value: {
                m00: 0, m01: 0, m02: 0,
                m03: 0, m04: 0, m05: 0,
                m06: 0, m07: 0, m08: 0,
            },
        };
        this.contentSlot = ``;
        this.childrenSlot = [
            /*html*/ `<ui-num-input ref="m00"></ui-num-input><ui-num-input ref="m01"></ui-num-input><ui-num-input ref="m02"></ui-num-input>`,
            /*html*/ `<ui-num-input ref="m03"></ui-num-input><ui-num-input ref="m04"></ui-num-input><ui-num-input ref="m05"></ui-num-input>`,
            /*html*/ `<ui-num-input ref="m06"></ui-num-input><ui-num-input ref="m07"></ui-num-input><ui-num-input ref="m08"></ui-num-input>`,
        ];
        this.style = `
.mat3 .slot-children { display: flex; }
.mat3 .slot-children > * { padding: 0 2px;}
.mat3 .slot-children ui-num-input { flex: 1; width: 0; color: white; }
    `;
    }
    onInit() {
        mat3KeyList.forEach((key) => {
            const $el = this.refs[key];
            $el.value = this.details.value[key] + '';
            this.refs[key].addEventListener('confirm', () => {
                if (!this.details) {
                    this.details = {
                        value: {
                            m00: 0, m01: 0, m02: 0,
                            m03: 0, m04: 0, m05: 0,
                            m06: 0, m07: 0, m08: 0,
                        },
                    };
                }
                const action = new Mat3PinAction(this, {
                    key,
                    source: this.details.value[key],
                    target: parseFloat($el.value),
                });
                this.exec(action);
            });
        });
    }
    onUpdate() {
        mat3KeyList.forEach((key) => {
            const $el = this.refs[key];
            $el.value = this.details.value[key] + '';
        });
    }
}
Mat3Pin.type = 'mat3';
(0, pin_1.declarePin)(Mat3Pin);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGluLW1hdDMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmxvY2stZm9yZ2UvaW50ZXJuYWwvcGluLW1hdDMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUdiLGdDQUFvRDtBQVdwRCxNQUFNLFdBQVcsR0FBZ0I7SUFDN0IsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO0lBQ25CLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztJQUNuQixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUs7Q0FDdEIsQ0FBQztBQVVGLE1BQU0sYUFBYyxTQUFRLGVBSTFCO0lBRUUsSUFBSSxDQUFDLE1BRUo7UUFDRyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzRixJQUFJLElBQUksRUFBRTtZQUNOLGFBQWE7WUFDYixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBZ0IsQ0FBQztZQUNsQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ3hELEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNsQjtJQUNMLENBQUM7SUFFRCxZQUFZO1FBQ1IsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQy9CLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUc7WUFDcEIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTtZQUMxQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNO1NBQzdCLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBUSxTQUFRLFNBQWU7SUFBckM7O1FBR0ksVUFBSyxHQUFHLFNBQVMsQ0FBQztRQUNsQixTQUFJLEdBQUcsUUFBUSxDQUFDO1FBQ2hCLFlBQU8sR0FBRztZQUNOLEtBQUssRUFBRTtnQkFDSCxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ3RCLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDdEIsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO2FBQ3pCO1NBQ0osQ0FBQztRQUVGLGdCQUFXLEdBQVcsRUFBRSxDQUFDO1FBQ3pCLGlCQUFZLEdBQUc7WUFDWCxRQUFRLENBQUEsdUhBQXVIO1lBQy9ILFFBQVEsQ0FBQSx1SEFBdUg7WUFDL0gsUUFBUSxDQUFBLHVIQUF1SDtTQUNsSSxDQUFDO1FBRUYsVUFBSyxHQUFHOzs7O0tBSVAsQ0FBQztJQWtDTixDQUFDO0lBaENHLE1BQU07UUFDRixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDeEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXFCLENBQUM7WUFDL0MsR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7WUFFekMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO2dCQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtvQkFDZixJQUFJLENBQUMsT0FBTyxHQUFHO3dCQUNYLEtBQUssRUFBRTs0QkFDSCxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7NEJBQ3RCLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQzs0QkFDdEIsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO3lCQUN6QjtxQkFDSixDQUFDO2lCQUNMO2dCQUVELE1BQU0sTUFBTSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksRUFBRTtvQkFDbkMsR0FBRztvQkFDSCxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO29CQUMvQixNQUFNLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7aUJBQ2hDLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsUUFBUTtRQUNKLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUN4QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBcUIsQ0FBQztZQUMvQyxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O0FBeERNLFlBQUksR0FBRyxNQUFNLENBQUM7QUEwRHpCLElBQUEsZ0JBQVUsRUFBQyxPQUFPLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUgeyBIVE1MR3JhcGhGb3JnZUVsZW1lbnQgfSBmcm9tICcuLi9mb3JnZSc7XG5pbXBvcnQgeyBQaW4sIGRlY2xhcmVQaW4sIFBpbkFjdGlvbiB9IGZyb20gJy4uL3Bpbic7XG5cbi8qKlxuICogVmVjNFxuICog5biD5bCU57G75Z6L55qE5byV6ISaXG4gKi9cbnR5cGUgTWF0M0tleUxpc3QgPSBbXG4gICAgJ20wMCcsICdtMDEnLCAnbTAyJyxcbiAgICAnbTAzJywgJ20wNCcsICdtMDUnLFxuICAgICdtMDYnLCAnbTA3JywgJ20wOCcsXG5dO1xuY29uc3QgbWF0M0tleUxpc3Q6IE1hdDNLZXlMaXN0ID0gW1xuICAgICdtMDAnLCAnbTAxJywgJ20wMicsXG4gICAgJ20wMycsICdtMDQnLCAnbTA1JyxcbiAgICAnbTA2JywgJ20wNycsICdtMDgnLFxuXTtcblxudHlwZSBNYXQzRGV0YWlsID0ge1xuICAgIHZhbHVlOiB7XG4gICAgICAgIG0wMDogbnVtYmVyLCBtMDE6IG51bWJlciwgbTAyOiBudW1iZXIsXG4gICAgICAgIG0wMzogbnVtYmVyLCBtMDQ6IG51bWJlciwgbTA1OiBudW1iZXIsXG4gICAgICAgIG0wNjogbnVtYmVyLCBtMDc6IG51bWJlciwgbTA4OiBudW1iZXIsXG4gICAgfTtcbn1cblxuY2xhc3MgTWF0M1BpbkFjdGlvbiBleHRlbmRzIFBpbkFjdGlvbjx7XG4gICAga2V5OiBrZXlvZiBNYXQzRGV0YWlsWyd2YWx1ZSddLFxuICAgIHNvdXJjZTogbnVtYmVyLFxuICAgIHRhcmdldDogbnVtYmVyLFxufT4ge1xuXG4gICAgZXhlYyhwYXJhbXM6IHtcbiAgICAgICAgZm9yZ2U6IEhUTUxHcmFwaEZvcmdlRWxlbWVudFxuICAgIH0pIHtcbiAgICAgICAgY29uc3QgJHBpbiA9IHBhcmFtcy5mb3JnZS5nZXRQaW5FbGVtZW50KHRoaXMuZGV0YWlsLmJsb2NrTmFtZSwgJ2lucHV0JywgdGhpcy5kZXRhaWwuaW5kZXgpO1xuICAgICAgICBpZiAoJHBpbikge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uc3QgcGluID0gJHBpbi5fX3BpbiBhcyBNYXQyUGluO1xuICAgICAgICAgICAgcGluLmRldGFpbHMudmFsdWVbdGhpcy5kZXRhaWwua2V5XSA9IHRoaXMuZGV0YWlsLnRhcmdldDtcbiAgICAgICAgICAgIHBpbi5vblVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV2ZXJ0QWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IE1hdDNQaW5BY3Rpb24odGhpcy5waW4sIHtcbiAgICAgICAgICAgIGtleTogdGhpcy5kZXRhaWwua2V5LFxuICAgICAgICAgICAgc291cmNlOiB0aGlzLmRldGFpbC50YXJnZXQsXG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMuZGV0YWlsLnNvdXJjZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jbGFzcyBNYXQzUGluIGV4dGVuZHMgUGluPE1hdDNEZXRhaWw+IHtcbiAgICBzdGF0aWMgdHlwZSA9ICdtYXQzJztcblxuICAgIGNvbG9yID0gJyNjNTZjMzcnO1xuICAgIGxpbmUgPSAnbm9ybWFsJztcbiAgICBkZXRhaWxzID0ge1xuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgbTAwOiAwLCBtMDE6IDAsIG0wMjogMCxcbiAgICAgICAgICAgIG0wMzogMCwgbTA0OiAwLCBtMDU6IDAsXG4gICAgICAgICAgICBtMDY6IDAsIG0wNzogMCwgbTA4OiAwLFxuICAgICAgICB9LFxuICAgIH07XG5cbiAgICBjb250ZW50U2xvdCA9IC8qaHRtbCovYGA7XG4gICAgY2hpbGRyZW5TbG90ID0gW1xuICAgICAgICAvKmh0bWwqL2A8dWktbnVtLWlucHV0IHJlZj1cIm0wMFwiPjwvdWktbnVtLWlucHV0Pjx1aS1udW0taW5wdXQgcmVmPVwibTAxXCI+PC91aS1udW0taW5wdXQ+PHVpLW51bS1pbnB1dCByZWY9XCJtMDJcIj48L3VpLW51bS1pbnB1dD5gLFxuICAgICAgICAvKmh0bWwqL2A8dWktbnVtLWlucHV0IHJlZj1cIm0wM1wiPjwvdWktbnVtLWlucHV0Pjx1aS1udW0taW5wdXQgcmVmPVwibTA0XCI+PC91aS1udW0taW5wdXQ+PHVpLW51bS1pbnB1dCByZWY9XCJtMDVcIj48L3VpLW51bS1pbnB1dD5gLFxuICAgICAgICAvKmh0bWwqL2A8dWktbnVtLWlucHV0IHJlZj1cIm0wNlwiPjwvdWktbnVtLWlucHV0Pjx1aS1udW0taW5wdXQgcmVmPVwibTA3XCI+PC91aS1udW0taW5wdXQ+PHVpLW51bS1pbnB1dCByZWY9XCJtMDhcIj48L3VpLW51bS1pbnB1dD5gLFxuICAgIF07XG5cbiAgICBzdHlsZSA9IGBcbi5tYXQzIC5zbG90LWNoaWxkcmVuIHsgZGlzcGxheTogZmxleDsgfVxuLm1hdDMgLnNsb3QtY2hpbGRyZW4gPiAqIHsgcGFkZGluZzogMCAycHg7fVxuLm1hdDMgLnNsb3QtY2hpbGRyZW4gdWktbnVtLWlucHV0IHsgZmxleDogMTsgd2lkdGg6IDA7IGNvbG9yOiB3aGl0ZTsgfVxuICAgIGA7XG5cbiAgICBvbkluaXQoKSB7XG4gICAgICAgIG1hdDNLZXlMaXN0LmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgJGVsID0gdGhpcy5yZWZzW2tleV0gYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgICAgICRlbC52YWx1ZSA9IHRoaXMuZGV0YWlscy52YWx1ZVtrZXldICsgJyc7XG5cbiAgICAgICAgICAgIHRoaXMucmVmc1trZXldLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbmZpcm0nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRldGFpbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRhaWxzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtMDA6IDAsIG0wMTogMCwgbTAyOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0wMzogMCwgbTA0OiAwLCBtMDU6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbTA2OiAwLCBtMDc6IDAsIG0wODogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gbmV3IE1hdDNQaW5BY3Rpb24odGhpcywge1xuICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5kZXRhaWxzLnZhbHVlW2tleV0sXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogcGFyc2VGbG9hdCgkZWwudmFsdWUpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZXhlYyhhY3Rpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uVXBkYXRlKCkge1xuICAgICAgICBtYXQzS2V5TGlzdC5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0ICRlbCA9IHRoaXMucmVmc1trZXldIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgICAgICAkZWwudmFsdWUgPSB0aGlzLmRldGFpbHMudmFsdWVba2V5XSArICcnO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5kZWNsYXJlUGluKE1hdDNQaW4pO1xuIl19