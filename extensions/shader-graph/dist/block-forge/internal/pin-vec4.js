'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const pin_1 = require("../pin");
class VecPinAction extends pin_1.PinAction {
    exec(params) {
        const $pin = params.forge.getPinElement(this.detail.blockName, 'input', this.detail.index);
        if ($pin) {
            // @ts-ignore
            const pin = $pin.__pin;
            pin.details.value[this.detail.key] = this.detail.target;
            pin.onUpdate();
        }
    }
    revertAction() {
        return new VecPinAction(this.pin, {
            key: this.detail.key,
            source: this.detail.target,
            target: this.detail.source,
        });
    }
}
/**
 * Vec4
 * 布尔类型的引脚
 */
class Vec4Pin extends pin_1.Pin {
    constructor() {
        super(...arguments);
        this.color = '#d0c679';
        this.line = 'normal';
        this.details = {
            value: {
                x: 0, y: 0,
                z: 0, w: 0,
            },
        };
        this.contentSlot = ``;
        this.childrenSlot = [
            /*html*/ `<ui-num-input ref="x" label="x"></ui-num-input><ui-num-input ref="y" label="y">`,
            /*html*/ `<ui-num-input ref="z" label="z"></ui-num-input><ui-num-input ref="w" label="w">`,
        ];
        this.style = `
.vec4 .slot-children { display: flex; }
.vec4 .slot-children > * { padding: 0 2px;}
.vec4 .slot-children ui-num-input { flex: 1; width: 0; color: white; }
    `;
    }
    onInit() {
        const keys = ['x', 'y', 'z', 'w'];
        keys.forEach((key) => {
            const $el = this.refs[key];
            $el.value = this.details.value[key] + '';
            this.refs[key].addEventListener('confirm', () => {
                if (!this.details) {
                    this.details = { value: { x: 0, y: 0, z: 0, w: 0 } };
                }
                // this.details.value[key] = parseFloat($el.value);
                const action = new VecPinAction(this, {
                    key,
                    source: this.details.value[key],
                    target: parseFloat($el.value),
                });
                this.exec(action);
            });
        });
    }
    onUpdate() {
        const keys = ['x', 'y', 'z', 'w'];
        keys.forEach((key) => {
            const $el = this.refs[key];
            $el.value = this.details.value[key] + '';
        });
    }
}
Vec4Pin.type = 'vec4';
(0, pin_1.declarePin)(Vec4Pin);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGluLXZlYzQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmxvY2stZm9yZ2UvaW50ZXJuYWwvcGluLXZlYzQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUdiLGdDQUFvRDtBQVdwRCxNQUFNLFlBQWEsU0FBUSxlQUl6QjtJQUVFLElBQUksQ0FBQyxNQUVKO1FBQ0csTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFM0YsSUFBSSxJQUFJLEVBQUU7WUFDTixhQUFhO1lBQ2IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQWdCLENBQUM7WUFDbEMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUN4RCxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDbEI7SUFDTCxDQUFDO0lBRUQsWUFBWTtRQUNSLE9BQU8sSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUM5QixHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHO1lBQ3BCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07WUFDMUIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTtTQUM3QixDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLE9BQVEsU0FBUSxTQUFrQjtJQUF4Qzs7UUFHSSxVQUFLLEdBQUcsU0FBUyxDQUFDO1FBQ2xCLFNBQUksR0FBRyxRQUFRLENBQUM7UUFDaEIsWUFBTyxHQUFHO1lBQ04sS0FBSyxFQUFFO2dCQUNILENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ1YsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQzthQUNiO1NBQ0osQ0FBQztRQUVGLGdCQUFXLEdBQVcsRUFBRSxDQUFDO1FBQ3pCLGlCQUFZLEdBQUc7WUFDWCxRQUFRLENBQUEsaUZBQWlGO1lBQ3pGLFFBQVEsQ0FBQSxpRkFBaUY7U0FDNUYsQ0FBQztRQUVGLFVBQUssR0FBRzs7OztLQUlQLENBQUM7SUErQk4sQ0FBQztJQTdCRyxNQUFNO1FBQ0YsTUFBTSxJQUFJLEdBQXlCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2pCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFxQixDQUFDO1lBQy9DLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBRXpDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtnQkFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7b0JBQ2YsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2lCQUN4RDtnQkFDRCxtREFBbUQ7Z0JBRW5ELE1BQU0sTUFBTSxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksRUFBRTtvQkFDbEMsR0FBRztvQkFDSCxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO29CQUMvQixNQUFNLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7aUJBQ2hDLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsUUFBUTtRQUNKLE1BQU0sSUFBSSxHQUF5QixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNqQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBcUIsQ0FBQztZQUMvQyxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O0FBbkRNLFlBQUksR0FBRyxNQUFNLENBQUM7QUFxRHpCLElBQUEsZ0JBQVUsRUFBQyxPQUFPLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUgeyBIVE1MR3JhcGhGb3JnZUVsZW1lbnQgfSBmcm9tICcuLi9mb3JnZSc7XG5pbXBvcnQgeyBQaW4sIGRlY2xhcmVQaW4sIFBpbkFjdGlvbiB9IGZyb20gJy4uL3Bpbic7XG5cbnR5cGUgVmVjNFBpbkRldGFpbCA9IHtcbiAgICB2YWx1ZToge1xuICAgICAgICB4OiBudW1iZXIsXG4gICAgICAgIHk6IG51bWJlcixcbiAgICAgICAgejogbnVtYmVyLFxuICAgICAgICB3OiBudW1iZXIsXG4gICAgfTtcbn1cblxuY2xhc3MgVmVjUGluQWN0aW9uIGV4dGVuZHMgUGluQWN0aW9uPHtcbiAgICBrZXk6IGtleW9mIFZlYzRQaW5EZXRhaWxbJ3ZhbHVlJ10sXG4gICAgc291cmNlOiBudW1iZXIsXG4gICAgdGFyZ2V0OiBudW1iZXIsXG59PiB7XG5cbiAgICBleGVjKHBhcmFtczoge1xuICAgICAgICBmb3JnZTogSFRNTEdyYXBoRm9yZ2VFbGVtZW50XG4gICAgfSkge1xuICAgICAgICBjb25zdCAkcGluID0gcGFyYW1zLmZvcmdlLmdldFBpbkVsZW1lbnQodGhpcy5kZXRhaWwuYmxvY2tOYW1lLCAnaW5wdXQnLCB0aGlzLmRldGFpbC5pbmRleCk7XG4gICAgXG4gICAgICAgIGlmICgkcGluKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBwaW4gPSAkcGluLl9fcGluIGFzIFZlYzRQaW47XG4gICAgICAgICAgICBwaW4uZGV0YWlscy52YWx1ZVt0aGlzLmRldGFpbC5rZXldID0gdGhpcy5kZXRhaWwudGFyZ2V0O1xuICAgICAgICAgICAgcGluLm9uVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXZlcnRBY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjUGluQWN0aW9uKHRoaXMucGluLCB7XG4gICAgICAgICAgICBrZXk6IHRoaXMuZGV0YWlsLmtleSxcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5kZXRhaWwudGFyZ2V0LFxuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmRldGFpbC5zb3VyY2UsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBWZWM0XG4gKiDluIPlsJTnsbvlnovnmoTlvJXohJpcbiAqL1xuY2xhc3MgVmVjNFBpbiBleHRlbmRzIFBpbjxWZWM0UGluRGV0YWlsPiB7XG4gICAgc3RhdGljIHR5cGUgPSAndmVjNCc7XG5cbiAgICBjb2xvciA9ICcjZDBjNjc5JztcbiAgICBsaW5lID0gJ25vcm1hbCc7XG4gICAgZGV0YWlscyA9IHtcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHg6IDAsIHk6IDAsXG4gICAgICAgICAgICB6OiAwLCB3OiAwLFxuICAgICAgICB9LFxuICAgIH07XG5cbiAgICBjb250ZW50U2xvdCA9IC8qaHRtbCovYGA7XG4gICAgY2hpbGRyZW5TbG90ID0gW1xuICAgICAgICAvKmh0bWwqL2A8dWktbnVtLWlucHV0IHJlZj1cInhcIiBsYWJlbD1cInhcIj48L3VpLW51bS1pbnB1dD48dWktbnVtLWlucHV0IHJlZj1cInlcIiBsYWJlbD1cInlcIj5gLFxuICAgICAgICAvKmh0bWwqL2A8dWktbnVtLWlucHV0IHJlZj1cInpcIiBsYWJlbD1cInpcIj48L3VpLW51bS1pbnB1dD48dWktbnVtLWlucHV0IHJlZj1cIndcIiBsYWJlbD1cIndcIj5gLFxuICAgIF07XG5cbiAgICBzdHlsZSA9IGBcbi52ZWM0IC5zbG90LWNoaWxkcmVuIHsgZGlzcGxheTogZmxleDsgfVxuLnZlYzQgLnNsb3QtY2hpbGRyZW4gPiAqIHsgcGFkZGluZzogMCAycHg7fVxuLnZlYzQgLnNsb3QtY2hpbGRyZW4gdWktbnVtLWlucHV0IHsgZmxleDogMTsgd2lkdGg6IDA7IGNvbG9yOiB3aGl0ZTsgfVxuICAgIGA7XG5cbiAgICBvbkluaXQoKSB7XG4gICAgICAgIGNvbnN0IGtleXM6IFsneCcsICd5JywgJ3onLCAndyddID0gWyd4JywgJ3knLCAneicsICd3J107XG4gICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCAkZWwgPSB0aGlzLnJlZnNba2V5XSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICAgICAgJGVsLnZhbHVlID0gdGhpcy5kZXRhaWxzLnZhbHVlW2tleV0gKyAnJztcblxuICAgICAgICAgICAgdGhpcy5yZWZzW2tleV0uYWRkRXZlbnRMaXN0ZW5lcignY29uZmlybScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGV0YWlscykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRldGFpbHMgPSB7IHZhbHVlOiB7IHg6IDAsIHk6IDAsIHo6IDAsIHc6IDAgfSB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB0aGlzLmRldGFpbHMudmFsdWVba2V5XSA9IHBhcnNlRmxvYXQoJGVsLnZhbHVlKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IG5ldyBWZWNQaW5BY3Rpb24odGhpcywge1xuICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5kZXRhaWxzLnZhbHVlW2tleV0sXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogcGFyc2VGbG9hdCgkZWwudmFsdWUpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZXhlYyhhY3Rpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uVXBkYXRlKCkge1xuICAgICAgICBjb25zdCBrZXlzOiBbJ3gnLCAneScsICd6JywgJ3cnXSA9IFsneCcsICd5JywgJ3onLCAndyddO1xuICAgICAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgJGVsID0gdGhpcy5yZWZzW2tleV0gYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgICAgICRlbC52YWx1ZSA9IHRoaXMuZGV0YWlscy52YWx1ZVtrZXldICsgJyc7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmRlY2xhcmVQaW4oVmVjNFBpbik7XG4iXX0=