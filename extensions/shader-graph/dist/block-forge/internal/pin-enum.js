'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const pin_1 = require("../pin");
const enum_1 = require("../enum");
class EnumPinAction extends pin_1.PinAction {
    exec(params) {
        const $pin = params.forge.getPinElement(this.detail.blockName, 'input', this.detail.index);
        if ($pin) {
            // @ts-ignore
            const pin = $pin.__pin;
            pin.details.value = this.detail.target;
            pin.onUpdate();
        }
    }
    revertAction() {
        return new EnumPinAction(this.pin, {
            source: this.detail.target,
            target: this.detail.source,
        });
    }
}
/**
 * Enum
 * 枚举类型的引脚
 */
class EnumPin extends pin_1.Pin {
    constructor() {
        super(...arguments);
        this.color = '#451359';
        this.line = 'normal';
        this.details = {
            value: 0,
        };
        this.style = `
        .pin-enum {
            flex: 1;
        }
    `;
        this.contentSlot = `<ui-select class="pin-enum" ref="enum"></ui-select>`;
        this.childrenSlot = [];
    }
    onInit() {
        const $enum = this.refs.enum;
        $enum.addEventListener('confirm', () => {
            if (!this.details) {
                this.details = {
                    value: 0,
                };
            }
            const action = new EnumPinAction(this, {
                source: this.details.value,
                target: parseInt($enum.value),
            });
            this.exec(action);
        });
    }
    onUpdate() {
        const $enum = this.refs.enum;
        $enum.innerHTML = '';
        (0, enum_1.getEnumByType)(this.desc.details?.type).forEach((data) => {
            const option = document.createElement('option');
            option.innerText = data.name;
            option.setAttribute('value', data.value + '');
            $enum.appendChild(option);
        });
        $enum.value = this.details.value + '';
    }
}
EnumPin.type = 'enum';
(0, pin_1.declarePin)(EnumPin);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGluLWVudW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmxvY2stZm9yZ2UvaW50ZXJuYWwvcGluLWVudW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUliLGdDQUFvRDtBQUNwRCxrQ0FBd0M7QUFPeEMsTUFBTSxhQUFjLFNBQVEsZUFHMUI7SUFFRSxJQUFJLENBQUMsTUFFSjtRQUNHLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNGLElBQUksSUFBSSxFQUFFO1lBQ04sYUFBYTtZQUNiLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFpQixDQUFDO1lBQ25DLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ3ZDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNsQjtJQUNMLENBQUM7SUFFRCxZQUFZO1FBQ1IsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQy9CLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07WUFDMUIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTtTQUM3QixDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLE9BQVEsU0FBUSxTQUFrQjtJQUF4Qzs7UUFHSSxVQUFLLEdBQUcsU0FBUyxDQUFDO1FBQ2xCLFNBQUksR0FBRyxRQUFRLENBQUM7UUFDaEIsWUFBTyxHQUFHO1lBQ04sS0FBSyxFQUFFLENBQUM7U0FDWCxDQUFDO1FBRUYsVUFBSyxHQUFHOzs7O0tBSVAsQ0FBQztRQUVGLGdCQUFXLEdBQVcscURBQXFELENBQUM7UUFDNUUsaUJBQVksR0FBRyxFQUFFLENBQUM7SUErQnRCLENBQUM7SUE3QkcsTUFBTTtRQUNGLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBd0IsQ0FBQztRQUNqRCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtZQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDZixJQUFJLENBQUMsT0FBTyxHQUFHO29CQUNYLEtBQUssRUFBRSxDQUFDO2lCQUNYLENBQUM7YUFDTDtZQUVELE1BQU0sTUFBTSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksRUFBRTtnQkFDbkMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSztnQkFDMUIsTUFBTSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO2FBQ2hDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsUUFBUTtRQUNKLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBd0IsQ0FBQztRQUVqRCxLQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFBLG9CQUFhLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBcUMsRUFBRSxFQUFFO1lBQ3JGLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEQsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDOUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztRQUNILEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQzFDLENBQUM7O0FBN0NNLFlBQUksR0FBRyxNQUFNLENBQUM7QUErQ3pCLElBQUEsZ0JBQVUsRUFBQyxPQUFPLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUgeyBIVE1MR3JhcGhGb3JnZUVsZW1lbnQgfSBmcm9tICcuLi9mb3JnZSc7XG5pbXBvcnQgdHlwZSB7IEJhc2VFbGVtZW50IH0gZnJvbSAnQGl0aGFyYm9ycy91aS1jb3JlJztcbmltcG9ydCB7IFBpbiwgZGVjbGFyZVBpbiwgUGluQWN0aW9uIH0gZnJvbSAnLi4vcGluJztcbmltcG9ydCB7IGdldEVudW1CeVR5cGUgfSBmcm9tICcuLi9lbnVtJztcbmltcG9ydCB7IElQaW5EZXNjcmlwdGlvbiwgUGluRGF0YSB9IGZyb20gJy4uL2ludGVyZmFjZSc7XG5cbnR5cGUgRW51bVBpbkRldGFpbCA9IHtcbiAgICB2YWx1ZTogbnVtYmVyO1xufVxuXG5jbGFzcyBFbnVtUGluQWN0aW9uIGV4dGVuZHMgUGluQWN0aW9uPHtcbiAgICBzb3VyY2U6IG51bWJlcixcbiAgICB0YXJnZXQ6IG51bWJlcixcbn0+IHtcblxuICAgIGV4ZWMocGFyYW1zOiB7XG4gICAgICAgIGZvcmdlOiBIVE1MR3JhcGhGb3JnZUVsZW1lbnRcbiAgICB9KSB7XG4gICAgICAgIGNvbnN0ICRwaW4gPSBwYXJhbXMuZm9yZ2UuZ2V0UGluRWxlbWVudCh0aGlzLmRldGFpbC5ibG9ja05hbWUsICdpbnB1dCcsIHRoaXMuZGV0YWlsLmluZGV4KTtcbiAgICAgICAgaWYgKCRwaW4pIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGNvbnN0IHBpbiA9ICRwaW4uX19waW4gYXMgRmxvYXRQaW47XG4gICAgICAgICAgICBwaW4uZGV0YWlscy52YWx1ZSA9IHRoaXMuZGV0YWlsLnRhcmdldDtcbiAgICAgICAgICAgIHBpbi5vblVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV2ZXJ0QWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IEVudW1QaW5BY3Rpb24odGhpcy5waW4sIHtcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5kZXRhaWwudGFyZ2V0LFxuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmRldGFpbC5zb3VyY2UsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBFbnVtXG4gKiDmnprkuL7nsbvlnovnmoTlvJXohJpcbiAqL1xuY2xhc3MgRW51bVBpbiBleHRlbmRzIFBpbjxFbnVtUGluRGV0YWlsPiB7XG4gICAgc3RhdGljIHR5cGUgPSAnZW51bSc7XG5cbiAgICBjb2xvciA9ICcjNDUxMzU5JztcbiAgICBsaW5lID0gJ25vcm1hbCc7XG4gICAgZGV0YWlscyA9IHtcbiAgICAgICAgdmFsdWU6IDAsXG4gICAgfTtcblxuICAgIHN0eWxlID0gYFxuICAgICAgICAucGluLWVudW0ge1xuICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgfVxuICAgIGA7XG5cbiAgICBjb250ZW50U2xvdCA9IC8qaHRtbCovYDx1aS1zZWxlY3QgY2xhc3M9XCJwaW4tZW51bVwiIHJlZj1cImVudW1cIj48L3VpLXNlbGVjdD5gO1xuICAgIGNoaWxkcmVuU2xvdCA9IFtdO1xuXG4gICAgb25Jbml0KCkge1xuICAgICAgICBjb25zdCAkZW51bSA9IHRoaXMucmVmcy5lbnVtIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgICRlbnVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbmZpcm0nLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGV0YWlscykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGV0YWlscyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gbmV3IEVudW1QaW5BY3Rpb24odGhpcywge1xuICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5kZXRhaWxzLnZhbHVlLFxuICAgICAgICAgICAgICAgIHRhcmdldDogcGFyc2VJbnQoJGVudW0udmFsdWUpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmV4ZWMoYWN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25VcGRhdGUoKSB7XG4gICAgICAgIGNvbnN0ICRlbnVtID0gdGhpcy5yZWZzLmVudW0gYXMgSFRNTElucHV0RWxlbWVudDtcblxuICAgICAgICAkZW51bS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgZ2V0RW51bUJ5VHlwZSh0aGlzLmRlc2MuZGV0YWlscz8udHlwZSkuZm9yRWFjaCgoZGF0YTogeyBuYW1lOiBzdHJpbmcsIHZhbHVlOiBudW1iZXIgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgICBvcHRpb24uaW5uZXJUZXh0ID0gZGF0YS5uYW1lO1xuICAgICAgICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgndmFsdWUnLCBkYXRhLnZhbHVlICsgJycpO1xuICAgICAgICAgICAgJGVudW0uYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgICRlbnVtLnZhbHVlID0gdGhpcy5kZXRhaWxzLnZhbHVlICsgJyc7XG4gICAgfVxufVxuZGVjbGFyZVBpbihFbnVtUGluKTtcbiJdfQ==