'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const pin_1 = require("../pin");
class Vec2PinAction extends pin_1.PinAction {
    exec(params) {
        const $pin = params.forge.getPinElement(this.detail.blockName, 'input', this.detail.index);
        if ($pin) {
            // @ts-ignore
            const pin = $pin.__pin;
            pin.details.value[this.detail.key] = this.detail.target;
            pin.onUpdate();
        }
    }
    revertAction() {
        return new Vec2PinAction(this.pin, {
            key: this.detail.key,
            source: this.detail.target,
            target: this.detail.source,
        });
    }
}
/**
 * Vec4
 * 布尔类型的引脚
 */
class Vec2Pin extends pin_1.Pin {
    constructor() {
        super(...arguments);
        this.color = '#D07979';
        this.line = 'normal';
        this.details = {
            value: {
                x: 0, y: 0,
            },
        };
        this.contentSlot = ``;
        this.childrenSlot = [
            /*html*/ `<ui-num-input ref="x" label="x"></ui-num-input><ui-num-input ref="y" label="y"></ui-num-input>`,
        ];
        this.style = `
.vec2 .slot-children { display: flex; }
.vec2 .slot-children > * { padding: 0 2px;}
.vec2 .slot-children ui-num-input { flex: 1; width: 0; color: white; }
    `;
    }
    onInit() {
        const keys = ['x', 'y'];
        keys.forEach((key) => {
            const $el = this.refs[key];
            $el.value = this.details.value[key] + '';
            this.refs[key].addEventListener('confirm', () => {
                if (!this.details) {
                    this.details = { value: { x: 0, y: 0 } };
                }
                // this.details.value[key] = parseFloat($el.value);
                const action = new Vec2PinAction(this, {
                    key,
                    source: this.details.value[key],
                    target: parseFloat($el.value),
                });
                this.exec(action);
            });
        });
    }
    onUpdate() {
        const keys = ['x', 'y'];
        keys.forEach((key) => {
            const $el = this.refs[key];
            $el.value = this.details.value[key] + '';
        });
    }
}
Vec2Pin.type = 'vec2';
(0, pin_1.declarePin)(Vec2Pin);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGluLXZlYzIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmxvY2stZm9yZ2UvaW50ZXJuYWwvcGluLXZlYzIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUdiLGdDQUFvRDtBQVNwRCxNQUFNLGFBQWMsU0FBUSxlQUkxQjtJQUVFLElBQUksQ0FBQyxNQUVKO1FBQ0csTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0YsSUFBSSxJQUFJLEVBQUU7WUFDTixhQUFhO1lBQ2IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQWdCLENBQUM7WUFDbEMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUN4RCxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDbEI7SUFDTCxDQUFDO0lBRUQsWUFBWTtRQUNSLE9BQU8sSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUMvQixHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHO1lBQ3BCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07WUFDMUIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTtTQUM3QixDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLE9BQVEsU0FBUSxTQUFrQjtJQUF4Qzs7UUFHSSxVQUFLLEdBQUcsU0FBUyxDQUFDO1FBQ2xCLFNBQUksR0FBRyxRQUFRLENBQUM7UUFDaEIsWUFBTyxHQUFHO1lBQ04sS0FBSyxFQUFFO2dCQUNILENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDYjtTQUNKLENBQUM7UUFFRixnQkFBVyxHQUFXLEVBQUUsQ0FBQztRQUN6QixpQkFBWSxHQUFHO1lBQ1gsUUFBUSxDQUFBLGdHQUFnRztTQUMzRyxDQUFDO1FBRUYsVUFBSyxHQUFHOzs7O0tBSVAsQ0FBQztJQStCTixDQUFDO0lBN0JHLE1BQU07UUFDRixNQUFNLElBQUksR0FBZSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDakIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXFCLENBQUM7WUFDL0MsR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7WUFFekMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO2dCQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtvQkFDZixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztpQkFDNUM7Z0JBQ0QsbURBQW1EO2dCQUVuRCxNQUFNLE1BQU0sR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUU7b0JBQ25DLEdBQUc7b0JBQ0gsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztvQkFDL0IsTUFBTSxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO2lCQUNoQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFFBQVE7UUFDSixNQUFNLElBQUksR0FBZSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDakIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXFCLENBQUM7WUFDL0MsR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztBQWpETSxZQUFJLEdBQUcsTUFBTSxDQUFDO0FBbUR6QixJQUFBLGdCQUFVLEVBQUMsT0FBTyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHsgSFRNTEdyYXBoRm9yZ2VFbGVtZW50IH0gZnJvbSAnLi4vZm9yZ2UnO1xuaW1wb3J0IHsgUGluLCBkZWNsYXJlUGluLCBQaW5BY3Rpb24gfSBmcm9tICcuLi9waW4nO1xuXG50eXBlIFZlYzJQaW5EZXRhaWwgPSB7XG4gICAgdmFsdWU6IHtcbiAgICAgICAgeDogbnVtYmVyLFxuICAgICAgICB5OiBudW1iZXIsXG4gICAgfTtcbn1cblxuY2xhc3MgVmVjMlBpbkFjdGlvbiBleHRlbmRzIFBpbkFjdGlvbjx7XG4gICAga2V5OiBrZXlvZiBWZWMyUGluRGV0YWlsWyd2YWx1ZSddLFxuICAgIHNvdXJjZTogbnVtYmVyLFxuICAgIHRhcmdldDogbnVtYmVyLFxufT4ge1xuXG4gICAgZXhlYyhwYXJhbXM6IHtcbiAgICAgICAgZm9yZ2U6IEhUTUxHcmFwaEZvcmdlRWxlbWVudFxuICAgIH0pIHtcbiAgICAgICAgY29uc3QgJHBpbiA9IHBhcmFtcy5mb3JnZS5nZXRQaW5FbGVtZW50KHRoaXMuZGV0YWlsLmJsb2NrTmFtZSwgJ2lucHV0JywgdGhpcy5kZXRhaWwuaW5kZXgpO1xuICAgICAgICBpZiAoJHBpbikge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uc3QgcGluID0gJHBpbi5fX3BpbiBhcyBNYXQyUGluO1xuICAgICAgICAgICAgcGluLmRldGFpbHMudmFsdWVbdGhpcy5kZXRhaWwua2V5XSA9IHRoaXMuZGV0YWlsLnRhcmdldDtcbiAgICAgICAgICAgIHBpbi5vblVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV2ZXJ0QWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlYzJQaW5BY3Rpb24odGhpcy5waW4sIHtcbiAgICAgICAgICAgIGtleTogdGhpcy5kZXRhaWwua2V5LFxuICAgICAgICAgICAgc291cmNlOiB0aGlzLmRldGFpbC50YXJnZXQsXG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMuZGV0YWlsLnNvdXJjZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vKipcbiAqIFZlYzRcbiAqIOW4g+WwlOexu+Wei+eahOW8leiEmlxuICovXG5jbGFzcyBWZWMyUGluIGV4dGVuZHMgUGluPFZlYzJQaW5EZXRhaWw+IHtcbiAgICBzdGF0aWMgdHlwZSA9ICd2ZWMyJztcblxuICAgIGNvbG9yID0gJyNEMDc5NzknO1xuICAgIGxpbmUgPSAnbm9ybWFsJztcbiAgICBkZXRhaWxzID0ge1xuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgeDogMCwgeTogMCxcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgY29udGVudFNsb3QgPSAvKmh0bWwqL2BgO1xuICAgIGNoaWxkcmVuU2xvdCA9IFtcbiAgICAgICAgLypodG1sKi9gPHVpLW51bS1pbnB1dCByZWY9XCJ4XCIgbGFiZWw9XCJ4XCI+PC91aS1udW0taW5wdXQ+PHVpLW51bS1pbnB1dCByZWY9XCJ5XCIgbGFiZWw9XCJ5XCI+PC91aS1udW0taW5wdXQ+YCxcbiAgICBdO1xuXG4gICAgc3R5bGUgPSBgXG4udmVjMiAuc2xvdC1jaGlsZHJlbiB7IGRpc3BsYXk6IGZsZXg7IH1cbi52ZWMyIC5zbG90LWNoaWxkcmVuID4gKiB7IHBhZGRpbmc6IDAgMnB4O31cbi52ZWMyIC5zbG90LWNoaWxkcmVuIHVpLW51bS1pbnB1dCB7IGZsZXg6IDE7IHdpZHRoOiAwOyBjb2xvcjogd2hpdGU7IH1cbiAgICBgO1xuXG4gICAgb25Jbml0KCkge1xuICAgICAgICBjb25zdCBrZXlzOiBbJ3gnLCAneSddID0gWyd4JywgJ3knXTtcbiAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0ICRlbCA9IHRoaXMucmVmc1trZXldIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgICAgICAkZWwudmFsdWUgPSB0aGlzLmRldGFpbHMudmFsdWVba2V5XSArICcnO1xuXG4gICAgICAgICAgICB0aGlzLnJlZnNba2V5XS5hZGRFdmVudExpc3RlbmVyKCdjb25maXJtJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5kZXRhaWxzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGV0YWlscyA9IHsgdmFsdWU6IHsgeDogMCwgeTogMCB9IH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRoaXMuZGV0YWlscy52YWx1ZVtrZXldID0gcGFyc2VGbG9hdCgkZWwudmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gbmV3IFZlYzJQaW5BY3Rpb24odGhpcywge1xuICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5kZXRhaWxzLnZhbHVlW2tleV0sXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogcGFyc2VGbG9hdCgkZWwudmFsdWUpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZXhlYyhhY3Rpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uVXBkYXRlKCkge1xuICAgICAgICBjb25zdCBrZXlzOiBbJ3gnLCAneSddID0gWyd4JywgJ3knXTtcbiAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0ICRlbCA9IHRoaXMucmVmc1trZXldIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgICAgICAkZWwudmFsdWUgPSB0aGlzLmRldGFpbHMudmFsdWVba2V5XSArICcnO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5kZWNsYXJlUGluKFZlYzJQaW4pO1xuIl19