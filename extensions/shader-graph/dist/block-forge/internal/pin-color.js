'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const pin_1 = require("../pin");
class ColorPinAction extends pin_1.PinAction {
    exec(params) {
        const $pin = params.forge.getPinElement(this.detail.blockName, 'input', this.detail.index);
        if ($pin) {
            // @ts-ignore
            const pin = $pin.__pin;
            pin.details.value = this.detail.target;
            pin.onUpdate();
        }
    }
    revertAction() {
        return new ColorPinAction(this.pin, {
            source: this.detail.target,
            target: this.detail.source,
        });
    }
}
/**
 * Float
 * 浮点类型的引脚
 */
class ColorPin extends pin_1.Pin {
    constructor() {
        super(...arguments);
        this.color = '#8471cf';
        this.line = 'normal';
        this.details = {
            value: {
                x: 0, y: 0, z: 0, w: 1,
            },
        };
        this.contentSlot = `<ui-color ref="color"></ui-color>`;
        this.childrenSlot = [];
    }
    onInit() {
        const $color = this.refs.color;
        $color.addEventListener('confirm', () => {
            const x = parseFloat($color.value[0]) / 255;
            const y = parseFloat($color.value[1]) / 255;
            const z = parseFloat($color.value[2]) / 255;
            const w = parseFloat($color.value[3]) / 255;
            if (!this.details) {
                this.details = {
                    value: { x, y, z, w },
                };
            }
            const action = new ColorPinAction(this, {
                source: this.details.value,
                target: { x, y, z, w },
            });
            this.exec(action);
        });
    }
    onUpdate() {
        const $color = this.refs.color;
        const color = this.details.value;
        $color.value = JSON.stringify([color.x * 255, color.y * 255, color.z * 255, color.w * 255]);
    }
}
ColorPin.type = 'color';
(0, pin_1.declarePin)(ColorPin);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGluLWNvbG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Jsb2NrLWZvcmdlL2ludGVybmFsL3Bpbi1jb2xvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBR2IsZ0NBQW9EO0FBV3BELE1BQU0sY0FBZSxTQUFRLGVBRzNCO0lBRUUsSUFBSSxDQUFDLE1BRUo7UUFDRyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzRixJQUFJLElBQUksRUFBRTtZQUNOLGFBQWE7WUFDYixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBaUIsQ0FBQztZQUNuQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUN2QyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDbEI7SUFDTCxDQUFDO0lBRUQsWUFBWTtRQUNSLE9BQU8sSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNoQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNO1lBQzFCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07U0FDN0IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxRQUFTLFNBQVEsU0FBZ0I7SUFBdkM7O1FBR0ksVUFBSyxHQUFHLFNBQVMsQ0FBQztRQUNsQixTQUFJLEdBQUcsUUFBUSxDQUFDO1FBQ2hCLFlBQU8sR0FBRztZQUNOLEtBQUssRUFBRTtnQkFDSCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQzthQUN6QjtTQUNKLENBQUM7UUFFRixnQkFBVyxHQUFXLG1DQUFtQyxDQUFDO1FBQzFELGlCQUFZLEdBQUcsRUFBRSxDQUFDO0lBNEJ0QixDQUFDO0lBMUJHLE1BQU07UUFDRixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQXlCLENBQUM7UUFDbkQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7WUFDcEMsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDNUMsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDNUMsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDNUMsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLE9BQU8sR0FBRztvQkFDWCxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7aUJBQ3hCLENBQUM7YUFDTDtZQUVELE1BQU0sTUFBTSxHQUFHLElBQUksY0FBYyxDQUFDLElBQUksRUFBRTtnQkFDcEMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSztnQkFDMUIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO2FBQ3pCLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsUUFBUTtRQUNKLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBeUIsQ0FBQztRQUNuRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUNqQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEcsQ0FBQzs7QUF0Q00sYUFBSSxHQUFHLE9BQU8sQ0FBQztBQXdDMUIsSUFBQSxnQkFBVSxFQUFDLFFBQVEsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7IEhUTUxHcmFwaEZvcmdlRWxlbWVudCB9IGZyb20gJy4uL2ZvcmdlJztcbmltcG9ydCB7IFBpbiwgZGVjbGFyZVBpbiwgUGluQWN0aW9uIH0gZnJvbSAnLi4vcGluJztcblxudHlwZSBDb2xvckRldGFpbCA9IHtcbiAgICB2YWx1ZToge1xuICAgICAgICB4OiBudW1iZXI7XG4gICAgICAgIHk6IG51bWJlcjtcbiAgICAgICAgejogbnVtYmVyO1xuICAgICAgICB3OiBudW1iZXI7XG4gICAgfTtcbn07XG5cbmNsYXNzIENvbG9yUGluQWN0aW9uIGV4dGVuZHMgUGluQWN0aW9uPHtcbiAgICBzb3VyY2U6IENvbG9yRGV0YWlsWyd2YWx1ZSddLFxuICAgIHRhcmdldDogQ29sb3JEZXRhaWxbJ3ZhbHVlJ10sXG59PiB7XG5cbiAgICBleGVjKHBhcmFtczoge1xuICAgICAgICBmb3JnZTogSFRNTEdyYXBoRm9yZ2VFbGVtZW50XG4gICAgfSkge1xuICAgICAgICBjb25zdCAkcGluID0gcGFyYW1zLmZvcmdlLmdldFBpbkVsZW1lbnQodGhpcy5kZXRhaWwuYmxvY2tOYW1lLCAnaW5wdXQnLCB0aGlzLmRldGFpbC5pbmRleCk7XG4gICAgICAgIGlmICgkcGluKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBwaW4gPSAkcGluLl9fcGluIGFzIENvbG9yUGluO1xuICAgICAgICAgICAgcGluLmRldGFpbHMudmFsdWUgPSB0aGlzLmRldGFpbC50YXJnZXQ7XG4gICAgICAgICAgICBwaW4ub25VcGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldmVydEFjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvclBpbkFjdGlvbih0aGlzLnBpbiwge1xuICAgICAgICAgICAgc291cmNlOiB0aGlzLmRldGFpbC50YXJnZXQsXG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMuZGV0YWlsLnNvdXJjZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEZsb2F0XG4gKiDmta7ngrnnsbvlnovnmoTlvJXohJpcbiAqL1xuY2xhc3MgQ29sb3JQaW4gZXh0ZW5kcyBQaW48Q29sb3JEZXRhaWw+IHtcbiAgICBzdGF0aWMgdHlwZSA9ICdjb2xvcic7XG5cbiAgICBjb2xvciA9ICcjODQ3MWNmJztcbiAgICBsaW5lID0gJ25vcm1hbCc7XG4gICAgZGV0YWlscyA9IHtcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHg6IDAsIHk6IDAsIHo6IDAsIHc6IDEsXG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnRlbnRTbG90ID0gLypodG1sKi9gPHVpLWNvbG9yIHJlZj1cImNvbG9yXCI+PC91aS1jb2xvcj5gO1xuICAgIGNoaWxkcmVuU2xvdCA9IFtdO1xuXG4gICAgb25Jbml0KCkge1xuICAgICAgICBjb25zdCAkY29sb3IgPSB0aGlzLnJlZnMuY29sb3IgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgJGNvbG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbmZpcm0nLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB4ID0gcGFyc2VGbG9hdCgkY29sb3IudmFsdWVbMF0pIC8gMjU1O1xuICAgICAgICAgICAgY29uc3QgeSA9IHBhcnNlRmxvYXQoJGNvbG9yLnZhbHVlWzFdKSAvIDI1NTtcbiAgICAgICAgICAgIGNvbnN0IHogPSBwYXJzZUZsb2F0KCRjb2xvci52YWx1ZVsyXSkgLyAyNTU7XG4gICAgICAgICAgICBjb25zdCB3ID0gcGFyc2VGbG9hdCgkY29sb3IudmFsdWVbM10pIC8gMjU1O1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRldGFpbHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRldGFpbHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IHgsIHksIHosIHcgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBuZXcgQ29sb3JQaW5BY3Rpb24odGhpcywge1xuICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5kZXRhaWxzLnZhbHVlLFxuICAgICAgICAgICAgICAgIHRhcmdldDogeyB4LCB5LCB6LCB3IH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZXhlYyhhY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvblVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgJGNvbG9yID0gdGhpcy5yZWZzLmNvbG9yIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy5kZXRhaWxzLnZhbHVlO1xuICAgICAgICAkY29sb3IudmFsdWUgPSBKU09OLnN0cmluZ2lmeShbY29sb3IueCAqIDI1NSwgY29sb3IueSAqIDI1NSwgY29sb3IueiAqIDI1NSwgY29sb3IudyAqIDI1NV0pO1xuICAgIH1cbn1cbmRlY2xhcmVQaW4oQ29sb3JQaW4pO1xuIl19