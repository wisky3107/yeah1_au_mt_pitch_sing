'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const pin_1 = require("../pin");
const enum_1 = require("../enum");
class DynamicEnumPinAction extends pin_1.PinAction {
    exec(params) {
        const $pin = params.forge.getPinElement(this.detail.blockName, 'input', this.detail.index);
        if ($pin) {
            // @ts-ignore
            const pin = $pin.__pin;
            pin.details.value = this.detail.target;
            pin.onUpdate();
        }
    }
    revertAction() {
        return new DynamicEnumPinAction(this.pin, {
            source: this.detail.target,
            target: this.detail.source,
        });
    }
}
/**
 * Enum
 * 枚举类型的引脚
 */
class DynamicEnumPin extends pin_1.Pin {
    constructor() {
        super(...arguments);
        this.color = '#451359';
        this.line = 'normal';
        this.details = {
            type: '',
            value: undefined,
        };
        this.style = `
        .pin-dynamic-enum {
            flex: 1;
        }
        .jump {
            margin-left: 2px;
        }
        .jump:hover {
            color: white;
        }
    `;
        this.contentSlot = `<ui-select class="pin-dynamic-enum" ref="enum"></ui-select>`;
        // contentSlot = /*html*/`<ui-select class="pin-dynamic-enum" ref="enum"></ui-select><ui-icon class="jump" ref="jump" value="link"></ui-icon>`;
        this.childrenSlot = [];
        this.index = -1;
        this.enumList = [];
        this.optionList = [];
    }
    onInit() {
        if (this.desc.details?.type) {
            (0, enum_1.removeEnumObserver)(this.desc.details?.type);
            (0, enum_1.addEnumObserver)(this.desc.details?.type, () => {
                this.sync();
            });
        }
        const $enum = this.refs.enum;
        $enum.addEventListener('confirm', () => {
            this.index = parseInt($enum.value);
            const item = this.enumList[this.index];
            const action = new DynamicEnumPinAction(this, {
                source: this.details.value,
                target: item.name,
            });
            this.exec(action);
        });
    }
    sync() {
        this.enumList = (0, enum_1.getDynamicEnumByType)(this.details.type);
        const $enum = this.refs.enum;
        this.optionList.forEach(option => $enum.removeChild(option));
        this.optionList.length = 0;
        for (let i = 0; i < this.enumList.length; i++) {
            const item = this.enumList[i];
            const option = document.createElement('option');
            option.innerText = item.name;
            option.setAttribute('value', item.value + '');
            $enum.appendChild(option);
            this.optionList.push(option);
            if (this.details.value && item.name === this.details.value) {
                this.index = i;
                $enum.value = this.index + '';
            }
            if (this.index === i && this.details.value !== item.value) {
                this.details.value = item.name;
            }
        }
        if (this.index === -1 && !this.details.value && this.desc) {
            for (let i = 0; i < this.enumList.length; i++) {
                const item = this.enumList[i];
                if (item.name === this.desc.details?.defaultValue) {
                    this.index = i;
                    this.details.value = item.name;
                    break;
                }
            }
            const $enum = this.refs.enum;
            $enum.value = this.index + '';
        }
    }
    onUpdate() {
        const $enum = this.refs.enum;
        this.details.type = this.desc.details?.type;
        this.sync();
    }
}
DynamicEnumPin.type = 'dynamicEnum';
(0, pin_1.declarePin)(DynamicEnumPin);
//# sourceMappingURL=data:application/json;base64,