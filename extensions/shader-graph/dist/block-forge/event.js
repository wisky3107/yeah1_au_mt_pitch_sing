'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.LineEvent = exports.BlockEvent = exports.LineMouseEvent = exports.BlockMouseEvent = exports.GraphMouseEvent = void 0;
class CustomEvent {
    constructor(blocks, lines) {
        this.blocks = blocks;
        this.lines = lines;
    }
}
class MouseEvent extends CustomEvent {
    constructor(blocks, lines) {
        super(blocks, lines);
        // 点击点在页面的坐标
        this.pageX = 0;
        this.pageY = 0;
        // 点击点在 Graph 里的坐标
        this.graphX = 0;
        this.graphY = 0;
    }
    initPagePosition(x, y) {
        this.pageX = x;
        this.pageY = y;
    }
    initGraphPosition(x, y) {
        this.graphX = x;
        this.graphY = y;
    }
}
class GraphMouseEvent extends MouseEvent {
    constructor(blocks, lines, target, forge) {
        super(blocks, lines);
        this.target = target;
        this.forge = forge;
    }
}
exports.GraphMouseEvent = GraphMouseEvent;
class BlockMouseEvent extends MouseEvent {
    constructor(blocks, lines, target, block) {
        super(blocks, lines);
        this.block = block;
        this.target = target;
    }
}
exports.BlockMouseEvent = BlockMouseEvent;
class LineMouseEvent extends MouseEvent {
    constructor(blocks, lines, target, line) {
        super(blocks, lines);
        this.line = line;
        this.target = target;
    }
}
exports.LineMouseEvent = LineMouseEvent;
class BlockEvent extends CustomEvent {
    constructor(blocks, lines, target, block) {
        super(blocks, lines);
        this.block = block;
        this.target = target;
    }
}
exports.BlockEvent = BlockEvent;
class LineEvent extends CustomEvent {
    constructor(blocks, lines, target, line) {
        super(blocks, lines);
        this.line = line;
        this.target = target;
    }
}
exports.LineEvent = LineEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmxvY2stZm9yZ2UvZXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7QUFlYixNQUFNLFdBQVc7SUFLYixZQUFZLE1BQWdCLEVBQUUsS0FBZTtRQUN6QyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0NBQ0o7QUFFRCxNQUFNLFVBQVcsU0FBUSxXQUFXO0lBU2hDLFlBQ0ksTUFBZ0IsRUFDaEIsS0FBZTtRQUVmLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFaekIsWUFBWTtRQUNaLFVBQUssR0FBRyxDQUFDLENBQUM7UUFDVixVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRVYsa0JBQWtCO1FBQ2xCLFdBQU0sR0FBRyxDQUFDLENBQUM7UUFDWCxXQUFNLEdBQUcsQ0FBQyxDQUFDO0lBT1gsQ0FBQztJQUVELGdCQUFnQixDQUFDLENBQVMsRUFBRSxDQUFTO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDbkIsQ0FBQztJQUVELGlCQUFpQixDQUFDLENBQVMsRUFBRSxDQUFTO1FBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7Q0FDSjtBQUVELE1BQWEsZUFBZ0IsU0FBUSxVQUFVO0lBSTNDLFlBQ0ksTUFBZ0IsRUFDaEIsS0FBZSxFQUNmLE1BQW9CLEVBQ3BCLEtBQTRCO1FBRTVCLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztDQUNKO0FBZEQsMENBY0M7QUFFRCxNQUFhLGVBQWdCLFNBQVEsVUFBVTtJQUczQyxZQUNJLE1BQWdCLEVBQ2hCLEtBQWUsRUFDZixNQUF3QixFQUN4QixLQUFnQjtRQUVoQixLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7Q0FDSjtBQWJELDBDQWFDO0FBRUQsTUFBYSxjQUFlLFNBQVEsVUFBVTtJQUcxQyxZQUNJLE1BQWdCLEVBQ2hCLEtBQWUsRUFDZixNQUFtQixFQUNuQixJQUFjO1FBRWQsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN6QixDQUFDO0NBQ0o7QUFiRCx3Q0FhQztBQUVELE1BQWEsVUFBVyxTQUFRLFdBQVc7SUFHdkMsWUFDSSxNQUFnQixFQUNoQixLQUFlLEVBQ2YsTUFBd0IsRUFDeEIsS0FBZ0I7UUFFaEIsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN6QixDQUFDO0NBQ0o7QUFiRCxnQ0FhQztBQUVELE1BQWEsU0FBVSxTQUFRLFdBQVc7SUFHdEMsWUFDSSxNQUFnQixFQUNoQixLQUFlLEVBQ2YsTUFBbUIsRUFDbkIsSUFBYztRQUVkLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztDQUNKO0FBYkQsOEJBYUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHsgR3JhcGhOb2RlRWxlbWVudCB9IGZyb20gJ0BpdGhhcmJvcnMvdWktZ3JhcGgvZGlzdC9lbGVtZW50L2dyYXBoLW5vZGUnO1xuaW1wb3J0IHR5cGUgeyBHcmFwaEVsZW1lbnQgfSBmcm9tICdAaXRoYXJib3JzL3VpLWdyYXBoL2Rpc3QvZWxlbWVudC9ncmFwaCc7XG5pbXBvcnQgdHlwZSB7IEhUTUxHcmFwaEZvcmdlRWxlbWVudCB9IGZyb20gJy4vZm9yZ2UnO1xuaW1wb3J0IHR5cGUgeyBHcmFwaERhdGEsIEJsb2NrRGF0YSwgTGluZURhdGEgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5cbnR5cGUgVE5vZGVNYXAgPSB7XG4gICAgW2tleTogc3RyaW5nXTogQmxvY2tEYXRhO1xufTtcblxudHlwZSBUTGluZU1hcCA9IHtcbiAgICBba2V5OiBzdHJpbmddOiBMaW5lRGF0YTtcbn07XG5cbmNsYXNzIEN1c3RvbUV2ZW50IHtcblxuICAgIGJsb2NrczogVE5vZGVNYXA7XG4gICAgbGluZXM6IFRMaW5lTWFwO1xuXG4gICAgY29uc3RydWN0b3IoYmxvY2tzOiBUTm9kZU1hcCwgbGluZXM6IFRMaW5lTWFwKSB7XG4gICAgICAgIHRoaXMuYmxvY2tzID0gYmxvY2tzO1xuICAgICAgICB0aGlzLmxpbmVzID0gbGluZXM7XG4gICAgfVxufVxuXG5jbGFzcyBNb3VzZUV2ZW50IGV4dGVuZHMgQ3VzdG9tRXZlbnQge1xuICAgIC8vIOeCueWHu+eCueWcqOmhtemdoueahOWdkOagh1xuICAgIHBhZ2VYID0gMDtcbiAgICBwYWdlWSA9IDA7XG5cbiAgICAvLyDngrnlh7vngrnlnKggR3JhcGgg6YeM55qE5Z2Q5qCHXG4gICAgZ3JhcGhYID0gMDtcbiAgICBncmFwaFkgPSAwO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGJsb2NrczogVE5vZGVNYXAsXG4gICAgICAgIGxpbmVzOiBUTGluZU1hcCxcbiAgICApIHtcbiAgICAgICAgc3VwZXIoYmxvY2tzLCBsaW5lcyk7XG4gICAgfVxuXG4gICAgaW5pdFBhZ2VQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICB0aGlzLnBhZ2VYID0geDtcbiAgICAgICAgdGhpcy5wYWdlWSA9IHk7XG4gICAgfVxuXG4gICAgaW5pdEdyYXBoUG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5ncmFwaFggPSB4O1xuICAgICAgICB0aGlzLmdyYXBoWSA9IHk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgR3JhcGhNb3VzZUV2ZW50IGV4dGVuZHMgTW91c2VFdmVudCB7XG4gICAgdGFyZ2V0OiBHcmFwaEVsZW1lbnQ7XG4gICAgZm9yZ2U6IEhUTUxHcmFwaEZvcmdlRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBibG9ja3M6IFROb2RlTWFwLFxuICAgICAgICBsaW5lczogVExpbmVNYXAsXG4gICAgICAgIHRhcmdldDogR3JhcGhFbGVtZW50LFxuICAgICAgICBmb3JnZTogSFRNTEdyYXBoRm9yZ2VFbGVtZW50LFxuICAgICkge1xuICAgICAgICBzdXBlcihibG9ja3MsIGxpbmVzKTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMuZm9yZ2UgPSBmb3JnZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCbG9ja01vdXNlRXZlbnQgZXh0ZW5kcyBNb3VzZUV2ZW50IHtcbiAgICBibG9jazogQmxvY2tEYXRhO1xuICAgIHRhcmdldDogR3JhcGhOb2RlRWxlbWVudDtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgYmxvY2tzOiBUTm9kZU1hcCxcbiAgICAgICAgbGluZXM6IFRMaW5lTWFwLFxuICAgICAgICB0YXJnZXQ6IEdyYXBoTm9kZUVsZW1lbnQsXG4gICAgICAgIGJsb2NrOiBCbG9ja0RhdGEsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGJsb2NrcywgbGluZXMpO1xuICAgICAgICB0aGlzLmJsb2NrID0gYmxvY2s7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIExpbmVNb3VzZUV2ZW50IGV4dGVuZHMgTW91c2VFdmVudCB7XG4gICAgdGFyZ2V0OiBTVkdHRWxlbWVudDtcbiAgICBsaW5lOiBMaW5lRGF0YTtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgYmxvY2tzOiBUTm9kZU1hcCxcbiAgICAgICAgbGluZXM6IFRMaW5lTWFwLFxuICAgICAgICB0YXJnZXQ6IFNWR0dFbGVtZW50LFxuICAgICAgICBsaW5lOiBMaW5lRGF0YSxcbiAgICApIHtcbiAgICAgICAgc3VwZXIoYmxvY2tzLCBsaW5lcyk7XG4gICAgICAgIHRoaXMubGluZSA9IGxpbmU7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJsb2NrRXZlbnQgZXh0ZW5kcyBDdXN0b21FdmVudHtcbiAgICBibG9jazogQmxvY2tEYXRhO1xuICAgIHRhcmdldDogR3JhcGhOb2RlRWxlbWVudDtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgYmxvY2tzOiBUTm9kZU1hcCxcbiAgICAgICAgbGluZXM6IFRMaW5lTWFwLFxuICAgICAgICB0YXJnZXQ6IEdyYXBoTm9kZUVsZW1lbnQsXG4gICAgICAgIGJsb2NrOiBCbG9ja0RhdGEsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGJsb2NrcywgbGluZXMpO1xuICAgICAgICB0aGlzLmJsb2NrID0gYmxvY2s7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIExpbmVFdmVudCBleHRlbmRzIEN1c3RvbUV2ZW50IHtcbiAgICBsaW5lOiBMaW5lRGF0YTtcbiAgICB0YXJnZXQ6IFNWR0dFbGVtZW50O1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBibG9ja3M6IFROb2RlTWFwLFxuICAgICAgICBsaW5lczogVExpbmVNYXAsXG4gICAgICAgIHRhcmdldDogU1ZHR0VsZW1lbnQsXG4gICAgICAgIGxpbmU6IExpbmVEYXRhLFxuICAgICkge1xuICAgICAgICBzdXBlcihibG9ja3MsIGxpbmVzKTtcbiAgICAgICAgdGhpcy5saW5lID0gbGluZTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgfVxufVxuIl19