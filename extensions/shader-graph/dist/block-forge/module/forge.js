'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pin = exports.PinD = exports.Block = exports.Graph = exports.Forge = void 0;
const block_1 = require("../block");
const graphWeakMap = new WeakMap();
const blockWeakMap = new WeakMap();
const pinWeakMap = new WeakMap();
class Forge {
    constructor(graph) {
        this.rootGraphData = graph;
    }
    get details() {
        return this.rootGraphData.details;
    }
    getGraph() {
        const graphData = this.rootGraphData;
        if (!graphWeakMap.has(graphData)) {
            graphWeakMap.set(graphData, new Graph(graphData));
        }
        return graphWeakMap.get(graphData);
    }
}
exports.Forge = Forge;
class Graph {
    constructor(graph) {
        this.graph = graph;
        // 生成数据
        this.getBlockMap();
        // 整理 line 数据
        const nodeMap = this.graph.nodes;
        const lineMap = this.graph.lines;
        for (const uuid in lineMap) {
            const line = lineMap[uuid];
            const inputNode = nodeMap[line.input.node];
            const outputNode = nodeMap[line.output.node];
            const inputBlock = blockWeakMap.get(inputNode);
            const outputBlock = blockWeakMap.get(outputNode);
            inputBlock?.getOutputPinsList();
            outputBlock?.getInputPinsList();
            const inputPin = inputBlock?.getOutputPin(line.input.param);
            const outPin = outputBlock?.getInputPin(line.output.param);
            if (outPin) {
                inputPin.connectPins.push(outPin);
            }
            if (inputPin) {
                outPin.connectPins.push(inputPin);
            }
        }
    }
    get details() {
        return this.graph.details;
    }
    getSubGraphMap() {
        const data = {};
        for (const uuid in this.graph.graphs) {
            const graphData = this.graph.graphs[uuid];
            if (!graphWeakMap.has(graphData)) {
                graphWeakMap.set(graphData, new Graph(graphData));
            }
            const graph = graphWeakMap.get(graphData);
            data[uuid] = graph;
        }
        return data;
    }
    getBlockMap() {
        const data = {};
        for (const uuid in this.graph.nodes) {
            const blockData = this.graph.nodes[uuid];
            if (!blockWeakMap.has(blockData)) {
                blockWeakMap.set(blockData, new Block(this, uuid, blockData));
            }
            const block = blockWeakMap.get(blockData);
            data[uuid] = block;
        }
        return data;
    }
}
exports.Graph = Graph;
class Block {
    constructor(graph, uuid, block) {
        this.graph = graph;
        this.uuid = uuid;
        this.block = block;
        this.desc = block_1.blockMap.get(this.block.type);
        this.getInputPinsList();
        this.getOutputPinsList();
    }
    get details() {
        return this.block.details;
    }
    getInputPin(tag) {
        const inputPins = this.desc?.inputPins || [];
        for (let index = 0; index < inputPins.length; index++) {
            const pinDesc = inputPins[index];
            if (pinDesc.tag === tag) {
                const pin = this.block.details.inputPins[index];
                return pinWeakMap.get(pin);
            }
        }
    }
    getOutputPin(tag) {
        const outputPins = this.desc?.outputPins || [];
        for (let index = 0; index < outputPins.length; index++) {
            const pin = outputPins[index];
            if (pin.tag === tag) {
                const pin = this.block.details.outputPins[index];
                return pinWeakMap.get(pin);
            }
        }
    }
    getInputPinsList() {
        const inputPins = this.block.details.inputPins || [];
        const blockDesc = this.desc || { inputPins: [] };
        return inputPins.map((pinData, index) => {
            if (!pinWeakMap.has(pinData)) {
                pinWeakMap.set(pinData, new Pin(PinD.input, this, pinData, blockDesc.inputPins[index]));
            }
            return pinWeakMap.get(pinData);
        });
    }
    getOutputPinsList() {
        const outputPins = this.block.details.outputPins || [];
        const blockDesc = this.desc || { outputPins: [] };
        return outputPins.map((pinData, index) => {
            if (!pinWeakMap.has(pinData)) {
                pinWeakMap.set(pinData, new Pin(PinD.output, this, pinData, blockDesc.outputPins[index]));
            }
            return pinWeakMap.get(pinData);
        });
    }
}
exports.Block = Block;
var PinD;
(function (PinD) {
    PinD[PinD["input"] = 0] = "input";
    PinD[PinD["output"] = 1] = "output";
})(PinD = exports.PinD || (exports.PinD = {}));
class Pin {
    constructor(dir, block, pin, desc) {
        this.connectPins = [];
        this.type = dir;
        this.block = block;
        this.desc = desc;
        this.value = pin;
    }
}
exports.Pin = Pin;
//# sourceMappingURL=data:application/json;base64,